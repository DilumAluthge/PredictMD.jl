{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PredictMD PredictMD is a free and open-source Julia package that provides a uniform interface for machine learning. PredictMD makes it easy to automate machine learning workflows and create reproducible machine learning pipelines. Installation PredictMD is registered in the Julia General registry. Therefore, to install PredictMD, simply open Julia and run the following four lines: import Pkg Pkg.activate( PredictMDEnvironment ; shared = true) Pkg.add( PredictMDFull ) import PredictMDFull Running the package tests You can run the PredictMD test suite by running the following five lines in Julia: import Pkg Pkg.activate( PredictMDEnvironment ; shared = true) Pkg.test( PredictMD ) Pkg.test( PredictMDExtra ) Pkg.test( PredictMDFull )","title":"Home"},{"location":"#predictmd","text":"PredictMD is a free and open-source Julia package that provides a uniform interface for machine learning. PredictMD makes it easy to automate machine learning workflows and create reproducible machine learning pipelines.","title":"PredictMD"},{"location":"#installation","text":"PredictMD is registered in the Julia General registry. Therefore, to install PredictMD, simply open Julia and run the following four lines: import Pkg Pkg.activate( PredictMDEnvironment ; shared = true) Pkg.add( PredictMDFull ) import PredictMDFull","title":"Installation"},{"location":"#running-the-package-tests","text":"You can run the PredictMD test suite by running the following five lines in Julia: import Pkg Pkg.activate( PredictMDEnvironment ; shared = true) Pkg.test( PredictMD ) Pkg.test( PredictMDExtra ) Pkg.test( PredictMDFull )","title":"Running the package tests"},{"location":"requirements_for_plotting/","text":"Requirements for plotting There are no requirements in order to run PredictMD\u2013you can train, run, and evaluate models without installing any additional software. However, in order to generate plots (e.g. ROC curves), you need to install the following additional software packages on your system: LaTeX pdf2svg. See below for instructions on installing these software packages. Once you have installed the required software, you can test PredictMD's plotting functionality by running the following command in Julia: ENV[ PREDICTMD_TEST_GROUP ] = test-plots ; Pkg.test( PredictMD ); Installing LaTeX To confirm that LaTeX is installed on your system, open a terminal window and run the following command: latex -v You should see an output message that looks something like this: pdfTeX 3.14159265-2.6-1.40.18 (TeX Live 2017) kpathsea version 6.2.3 Copyright 2017 Han The Thanh (pdfTeX) et al. There is NO warranty. Redistribution of this software is covered by the terms of both the pdfTeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the pdfTeX source. Primary author of pdfTeX: Han The Thanh (pdfTeX) et al. Compiled with libpng 1.6.29; using libpng 1.6.29 Compiled with zlib 1.2.11; using zlib 1.2.11 Compiled with xpdf version 3.04 If you receive an error (e.g. \"command not found\"), download and install a TeX distribution from the appropriate link below: Windows: https://tug.org/protext/ macOS: https://tug.org/mactex/ GNU/Linux: https://tug.org/texlive/ Installing pdf2svg To confirm that pdf2svg is installed on your system, open a terminal window and run the following command: pdf2svg You should see an output message that looks something like this: Usage: pdf2svg in file.pdf out file.svg [ page no ] If you receive an error (e.g. \"command not found\"), download and install pdf2svg from the appropriate link below: Windows: https://github.com/jalios/pdf2svg-windows macOS: http://brewinstall.org/Install-pdf2svg-on-Mac-with-Brew/ GNU/Linux: http://www.cityinthesky.co.uk/opensource/pdf2svg/","title":"Requirements for plotting (optional)"},{"location":"requirements_for_plotting/#requirements-for-plotting","text":"There are no requirements in order to run PredictMD\u2013you can train, run, and evaluate models without installing any additional software. However, in order to generate plots (e.g. ROC curves), you need to install the following additional software packages on your system: LaTeX pdf2svg. See below for instructions on installing these software packages. Once you have installed the required software, you can test PredictMD's plotting functionality by running the following command in Julia: ENV[ PREDICTMD_TEST_GROUP ] = test-plots ; Pkg.test( PredictMD );","title":"Requirements for plotting"},{"location":"requirements_for_plotting/#installing-latex","text":"To confirm that LaTeX is installed on your system, open a terminal window and run the following command: latex -v You should see an output message that looks something like this: pdfTeX 3.14159265-2.6-1.40.18 (TeX Live 2017) kpathsea version 6.2.3 Copyright 2017 Han The Thanh (pdfTeX) et al. There is NO warranty. Redistribution of this software is covered by the terms of both the pdfTeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the pdfTeX source. Primary author of pdfTeX: Han The Thanh (pdfTeX) et al. Compiled with libpng 1.6.29; using libpng 1.6.29 Compiled with zlib 1.2.11; using zlib 1.2.11 Compiled with xpdf version 3.04 If you receive an error (e.g. \"command not found\"), download and install a TeX distribution from the appropriate link below: Windows: https://tug.org/protext/ macOS: https://tug.org/mactex/ GNU/Linux: https://tug.org/texlive/","title":"Installing LaTeX"},{"location":"requirements_for_plotting/#installing-pdf2svg","text":"To confirm that pdf2svg is installed on your system, open a terminal window and run the following command: pdf2svg You should see an output message that looks something like this: Usage: pdf2svg in file.pdf out file.svg [ page no ] If you receive an error (e.g. \"command not found\"), download and install pdf2svg from the appropriate link below: Windows: https://github.com/jalios/pdf2svg-windows macOS: http://brewinstall.org/Install-pdf2svg-on-Mac-with-Brew/ GNU/Linux: http://www.cityinthesky.co.uk/opensource/pdf2svg/","title":"Installing pdf2svg"},{"location":"examples/cpu_examples/boston_housing/01_preprocess_data/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , boston_housing , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin data preprocessing code Random.seed!(999) df = DataFrames.DataFrame( CSVFiles.load( CSVFiles.Stream( CSVFiles.format CSV , GZip.gzopen( joinpath( dirname(pathof(RDatasets)), .. , data , MASS , Boston.csv.gz , ) ), ), ), ) categorical_feature_names = Symbol[] continuous_feature_names = Symbol[ :Crim, :Zn, :Indus, :Chas, :NOx, :Rm, :Age, :Dis, :Rad, :Tax, :PTRatio, :Black, :LStat, ] categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) @info( , categorical_feature_names_filename) @info( , isfile(categorical_feature_names_filename)) @info( , dirname(categorical_feature_names_filename)) @info( , isdir(dirname(categorical_feature_names_filename))) @info( , joinpath(PROJECT_OUTPUT_DIRECTORY, data )) @info( , isdir(joinpath(PROJECT_OUTPUT_DIRECTORY, data ))) @info( , PROJECT_OUTPUT_DIRECTORY) @info( , isdir(PROJECT_OUTPUT_DIRECTORY)) FileIO.save( categorical_feature_names_filename, categorical_feature_names , categorical_feature_names, ) FileIO.save( continuous_feature_names_filename, continuous_feature_names , continuous_feature_names, ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :MedV continuous_label_names = Symbol[single_label_name] categorical_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) df = df[:, vcat(feature_names, label_names)] DataFrames.dropmissing!(df; disallowmissing=true,) PredictMD.shuffle_rows!(df) PredictMD.fix_column_types!( df; categorical_feature_names = categorical_feature_names, continuous_feature_names = continuous_feature_names, categorical_label_names = categorical_label_names, continuous_label_names = continuous_label_names, ) PredictMD.check_column_types( df; categorical_feature_names = categorical_feature_names, continuous_feature_names = continuous_feature_names, categorical_label_names = categorical_label_names, continuous_label_names = continuous_label_names, ) PredictMD.check_no_constant_columns(df) features_df = df[feature_names] labels_df = df[label_names] DataFrames.describe(labels_df[single_label_name]) (trainingandtuning_features_df, trainingandtuning_labels_df, testing_features_df, testing_labels_df,) = PredictMD.split_data( features_df, labels_df, 0.75, ) (training_features_df, training_labels_df, tuning_features_df, tuning_labels_df,) = PredictMD.split_data( trainingandtuning_features_df, trainingandtuning_labels_df, 2/3, ) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) CSV.write( trainingandtuning_features_df_filename, trainingandtuning_features_df, ) CSV.write( trainingandtuning_labels_df_filename, trainingandtuning_labels_df, ) CSV.write( testing_features_df_filename, testing_features_df, ) CSV.write( testing_labels_df_filename, testing_labels_df, ) CSV.write( training_features_df_filename, training_features_df, ) CSV.write( training_labels_df_filename, training_labels_df, ) CSV.write( tuning_features_df_filename, tuning_features_df, ) CSV.write( tuning_labels_df_filename, tuning_labels_df, ) ### End data preprocessing code This page was generated using Literate.jl .","title":"1. Preprocess data"},{"location":"examples/cpu_examples/boston_housing/02_linear_regression/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , boston_housing , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin linear regression code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :MedV continuous_label_names = Symbol[single_label_name] categorical_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) linear_regression = PredictMD.single_labeldataframelinearregression( feature_names, single_label_name; package = :GLM, intercept = true, interactions = 1, name = Linear regression , ) PredictMD.fit!(linear_regression,training_features_df,training_labels_df,) PredictMD.get_underlying(linear_regression) linear_regression_plot_training = PredictMD.plotsinglelabelregressiontrueversuspredicted( linear_regression, training_features_df, training_labels_df, single_label_name, ); display(linear_regression_plot_training) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , linear_regression_plot_training.pdf , ), linear_regression_plot_training, ) linear_regression_plot_testing = PredictMD.plotsinglelabelregressiontrueversuspredicted( linear_regression, testing_features_df, testing_labels_df, single_label_name ); display(linear_regression_plot_testing) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , linear_regression_plot_testing.pdf , ), linear_regression_plot_testing, ) show( PredictMD.singlelabelregressionmetrics( linear_regression, training_features_df, training_labels_df, single_label_name, ); allrows = true, allcols = true, splitcols = false, ) show( PredictMD.singlelabelregressionmetrics( linear_regression, testing_features_df, testing_labels_df, single_label_name, ); allrows = true, allcols = true, splitcols = false, ) linear_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , linear_regression.jld2 , ) PredictMD.save_model(linear_regression_filename, linear_regression) ### End linear regression code This page was generated using Literate.jl .","title":"2. Linear regression"},{"location":"examples/cpu_examples/boston_housing/03_random_forest_regression/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , boston_housing , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin random forest regression code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :MedV continuous_label_names = Symbol[single_label_name] categorical_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) feature_contrasts = PredictMD.generate_feature_contrasts( training_features_df, feature_names, ) random_forest_regression = PredictMD.single_labeldataframerandomforestregression( feature_names, single_label_name; nsubfeatures = 2, ntrees = 20, package = :DecisionTree, name = Random forest , feature_contrasts = feature_contrasts, ) PredictMD.fit!( random_forest_regression, training_features_df, training_labels_df, ) random_forest_regression_plot_training = PredictMD.plotsinglelabelregressiontrueversuspredicted( random_forest_regression, training_features_df, training_labels_df, single_label_name, ); display(random_forest_regression_plot_training) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , random_forest_regression_plot_training.pdf , ), random_forest_regression_plot_training, ) random_forest_regression_plot_testing = PredictMD.plotsinglelabelregressiontrueversuspredicted( random_forest_regression, testing_features_df, testing_labels_df, single_label_name, ); display(random_forest_regression_plot_testing) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , random_forest_regression_plot_testing.pdf , ), random_forest_regression_plot_testing, ) show( PredictMD.singlelabelregressionmetrics( random_forest_regression, training_features_df, training_labels_df, single_label_name, ); allrows = true, allcols = true, splitcols = false, ) show( PredictMD.singlelabelregressionmetrics( random_forest_regression, testing_features_df, testing_labels_df, single_label_name, ); allrows = true, allcols = true, splitcols = false, ) random_forest_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , random_forest_regression.jld2 , ) PredictMD.save_model( random_forest_regression_filename, random_forest_regression ) ### End random forest regression code This page was generated using Literate.jl .","title":"3. Random forest regression"},{"location":"examples/cpu_examples/boston_housing/04_knet_mlp_regression/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , boston_housing , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin Knet neural network regression code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :MedV continuous_label_names = Symbol[single_label_name] categorical_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) knet_mlp_predict_function_source = function knetmlp_predict( w, x0::AbstractArray, ) x1 = Knet.relu.( w[1]*x0 .+ w[2] ) x2 = w[3]*x1 .+ w[4] return x2 end knet_mlp_loss_function_source = function knetmlp_loss( predict_function::Function, modelweights, x::AbstractArray, ytrue::AbstractArray; L1::Real = Cfloat(0), L2::Real = Cfloat(0), ) loss = Statistics.mean( abs2, ytrue - predict_function( modelweights, x, ), ) if L1 != 0 loss += L1 * sum(sum(abs, w_i) for w_i in modelweights[1:2:end]) end if L2 != 0 loss += L2 * sum(sum(abs2, w_i) for w_i in modelweights[1:2:end]) end return loss end feature_contrasts = PredictMD.generate_feature_contrasts(training_features_df, feature_names) knetmlp_modelweights = Any[ Cfloat.( 0.1f0*randn(Cfloat,10,feature_contrasts.num_array_columns) ), Cfloat.( fill(Cfloat(0),10,1) ), Cfloat.( 0.1f0*randn(Cfloat,1,10) ), Cfloat.( fill(Cfloat(0),1,1), ), ] knetmlp_losshyperparameters = Dict() knetmlp_losshyperparameters[:L1] = Cfloat(0.0) knetmlp_losshyperparameters[:L2] = Cfloat(0.0) knetmlp_optimizationalgorithm = :Adam knetmlp_optimizerhyperparameters = Dict() knetmlp_minibatchsize = 48 knet_mlp_regression = PredictMD.single_labeldataframeknetregression( feature_names, single_label_name; package = :Knet, name = Knet MLP , predict_function_source = knet_mlp_predict_function_source, loss_function_source = knet_mlp_loss_function_source, losshyperparameters = knetmlp_losshyperparameters, optimizationalgorithm = knetmlp_optimizationalgorithm, optimizerhyperparameters = knetmlp_optimizerhyperparameters, minibatchsize = knetmlp_minibatchsize, modelweights = knetmlp_modelweights, maxepochs = 100, printlosseverynepochs = 10, feature_contrasts = feature_contrasts, ) PredictMD.parse_functions!(knet_mlp_regression) PredictMD.fit!( knet_mlp_regression, training_features_df, training_labels_df, tuning_features_df, tuning_labels_df, ) PredictMD.set_max_epochs!(knet_mlp_regression, 200) PredictMD.fit!( knet_mlp_regression, training_features_df, training_labels_df, tuning_features_df, tuning_labels_df, ) knet_learningcurve_lossvsepoch = PredictMD.plotlearningcurve( knet_mlp_regression, :loss_vs_epoch; ); display(knet_learningcurve_lossvsepoch) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_learningcurve_lossvsepoch.pdf , ), knet_learningcurve_lossvsepoch, ) knet_learningcurve_lossvsepoch_skip10epochs = PredictMD.plotlearningcurve( knet_mlp_regression, :loss_vs_epoch; startat = 10, endat = :end, ); display(knet_learningcurve_lossvsepoch_skip10epochs) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_learningcurve_lossvsepoch_skip10epochs.pdf , ), knet_learningcurve_lossvsepoch_skip10epochs, ) knet_learningcurve_lossvsiteration = PredictMD.plotlearningcurve( knet_mlp_regression, :loss_vs_iteration; window = 50, sampleevery = 10, ); display(knet_learningcurve_lossvsiteration) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_learningcurve_lossvsiteration.pdf , ), knet_learningcurve_lossvsiteration, ) knet_learningcurve_lossvsiteration_skip100iterations = PredictMD.plotlearningcurve( knet_mlp_regression, :loss_vs_iteration; window = 50, sampleevery = 10, startat = 100, endat = :end, ); display(knet_learningcurve_lossvsiteration_skip100iterations) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_learningcurve_lossvsiteration_skip100iterations.pdf , ), knet_learningcurve_lossvsiteration_skip100iterations, ) knet_mlp_regression_plot_training = PredictMD.plotsinglelabelregressiontrueversuspredicted( knet_mlp_regression, training_features_df, training_labels_df, single_label_name, ); display(knet_mlp_regression_plot_training) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_mlp_regression_plot_training.pdf , ), knet_mlp_regression_plot_training, ) knet_mlp_regression_plot_testing = PredictMD.plotsinglelabelregressiontrueversuspredicted( knet_mlp_regression, testing_features_df, testing_labels_df, single_label_name, ); display(knet_mlp_regression_plot_testing) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_mlp_regression_plot_testing.pdf , ), knet_mlp_regression_plot_testing, ) show( PredictMD.singlelabelregressionmetrics( knet_mlp_regression, training_features_df, training_labels_df, single_label_name, ); allrows = true, allcols = true, splitcols = false, ) show( PredictMD.singlelabelregressionmetrics( knet_mlp_regression, testing_features_df, testing_labels_df, single_label_name, ); allrows = true, allcols = true, splitcols = false, ) knet_mlp_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , knet_mlp_regression.jld2 , ) PredictMD.save_model(knet_mlp_regression_filename, knet_mlp_regression) ### End Knet neural network regression code This page was generated using Literate.jl .","title":"4. Knet neural network regression"},{"location":"examples/cpu_examples/boston_housing/05_compare_models/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , boston_housing , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin model comparison code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) linear_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , linear_regression.jld2 , ) random_forest_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , random_forest_regression.jld2 , ) knet_mlp_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , knet_mlp_regression.jld2 , ) linear_regression = PredictMD.load_model(linear_regression_filename) random_forest_regression = PredictMD.load_model(random_forest_regression_filename) knet_mlp_regression = PredictMD.load_model(knet_mlp_regression_filename) PredictMD.parse_functions!(knet_mlp_regression) all_models = PredictMD.Fittable[ linear_regression, random_forest_regression, knet_mlp_regression, ] single_label_name = :MedV continuous_label_names = Symbol[single_label_name] categorical_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) println( Single label regression metrics, training set: ) show( PredictMD.singlelabelregressionmetrics( all_models, training_features_df, training_labels_df, single_label_name, ); allrows = true, allcols = true, splitcols = false, ) println( Single label regression metrics, testing set: ) show( PredictMD.singlelabelregressionmetrics( all_models, testing_features_df, testing_labels_df, single_label_name, ); allrows = true, allcols = true, splitcols = false, ) ### End model comparison code This page was generated using Literate.jl .","title":"5. Compare models"},{"location":"examples/cpu_examples/boston_housing/06_get_model_output/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , boston_housing , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin model output code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) linear_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , linear_regression.jld2 , ) random_forest_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , random_forest_regression.jld2 , ) knet_mlp_regression_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , knet_mlp_regression.jld2 , ) linear_regression = PredictMD.load_model(linear_regression_filename) random_forest_regression = PredictMD.load_model(random_forest_regression_filename) knet_mlp_regression = PredictMD.load_model(knet_mlp_regression_filename) PredictMD.parse_functions!(knet_mlp_regression) PredictMD.predict(linear_regression,training_features_df,) PredictMD.predict(random_forest_regression,training_features_df,) PredictMD.predict(knet_mlp_regression,training_features_df,) PredictMD.predict(linear_regression,testing_features_df,) PredictMD.predict(random_forest_regression,testing_features_df,) PredictMD.predict(knet_mlp_regression,testing_features_df,) ### End model output code This page was generated using Literate.jl .","title":"6. Directly access model output"},{"location":"examples/cpu_examples/breast_cancer_biopsy/01_preprocess_data/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin data preprocessing code Random.seed!(999) df = RDatasets.dataset( MASS , biopsy ) categorical_feature_names = Symbol[] continuous_feature_names = Symbol[ :V1, :V2, :V3, :V4, :V5, :V6, :V7, :V8, :V9, ] categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) FileIO.save( categorical_feature_names_filename, categorical_feature_names , categorical_feature_names, ) FileIO.save( continuous_feature_names_filename, continuous_feature_names , continuous_feature_names, ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :Class negative_class = benign positive_class = malignant single_label_levels = [negative_class, positive_class] categorical_label_names = Symbol[single_label_name] continuous_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) df = df[:, vcat(feature_names, label_names)] DataFrames.dropmissing!(df; disallowmissing=true,) PredictMD.shuffle_rows!(df) PredictMD.fix_column_types!( df; categorical_feature_names = categorical_feature_names, continuous_feature_names = continuous_feature_names, categorical_label_names = categorical_label_names, continuous_label_names = continuous_label_names, ) PredictMD.check_column_types( df; categorical_feature_names = categorical_feature_names, continuous_feature_names = continuous_feature_names, categorical_label_names = categorical_label_names, continuous_label_names = continuous_label_names, ) PredictMD.check_no_constant_columns(df) features_df = df[feature_names] labels_df = df[label_names] (trainingandtuning_features_df, trainingandtuning_labels_df, testing_features_df, testing_labels_df,) = PredictMD.split_data( features_df, labels_df, 0.75, ) (training_features_df, training_labels_df, tuning_features_df, tuning_labels_df,) = PredictMD.split_data( trainingandtuning_features_df, trainingandtuning_labels_df, 2/3, ) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) CSV.write( trainingandtuning_features_df_filename, trainingandtuning_features_df, ) CSV.write( trainingandtuning_labels_df_filename, trainingandtuning_labels_df, ) CSV.write( testing_features_df_filename, testing_features_df, ) CSV.write( testing_labels_df_filename, testing_labels_df, ) CSV.write( training_features_df_filename, training_features_df, ) CSV.write( training_labels_df_filename, training_labels_df, ) CSV.write( tuning_features_df_filename, tuning_features_df, ) CSV.write( tuning_labels_df_filename, tuning_labels_df, ) ### End data preprocessing code This page was generated using Literate.jl .","title":"1. Preprocess data"},{"location":"examples/cpu_examples/breast_cancer_biopsy/02_smote/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin SMOTE class-balancing code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :Class negative_class = benign positive_class = malignant single_label_levels = [negative_class, positive_class] categorical_label_names = Symbol[single_label_name] continuous_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) DataFrames.describe(training_labels_df[single_label_name]) StatsBase.countmap(training_labels_df[single_label_name]) majorityclass = benign minorityclass = malignant (smoted_training_features_df, smoted_training_labels_df,) = PredictMD.smote( training_features_df, training_labels_df, feature_names, single_label_name; majorityclass = majorityclass, minorityclass = minorityclass, pct_over = 100, minority_to_majority_ratio = 1.0, k = 5, ) PredictMD.check_column_types( smoted_training_features_df; categorical_feature_names = categorical_feature_names, continuous_feature_names = continuous_feature_names, categorical_label_names = categorical_label_names, continuous_label_names = continuous_label_names, ) PredictMD.check_column_types( smoted_training_labels_df; categorical_feature_names = categorical_feature_names, continuous_feature_names = continuous_feature_names, categorical_label_names = categorical_label_names, continuous_label_names = continuous_label_names, ) PredictMD.check_no_constant_columns(smoted_training_features_df) PredictMD.check_no_constant_columns(smoted_training_labels_df) DataFrames.describe(smoted_training_labels_df[single_label_name]) StatsBase.countmap(smoted_training_labels_df[single_label_name]) smoted_training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_features_df.csv , ) smoted_training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_labels_df.csv , ) CSV.write( smoted_training_features_df_filename, smoted_training_features_df, ) CSV.write( smoted_training_labels_df_filename, smoted_training_labels_df, ) ### End SMOTE class-balancing code This page was generated using Literate.jl .","title":"2. Apply SMOTE algorithm"},{"location":"examples/cpu_examples/breast_cancer_biopsy/03_logistic_classifier/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin logistic classifier code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) smoted_training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_features_df.csv , ) smoted_training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_labels_df.csv , ) smoted_training_features_df = DataFrames.DataFrame( FileIO.load( smoted_training_features_df_filename; type_detect_rows = 100, ) ) smoted_training_labels_df = DataFrames.DataFrame( FileIO.load( smoted_training_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :Class negative_class = benign positive_class = malignant single_label_levels = [negative_class, positive_class] categorical_label_names = Symbol[single_label_name] continuous_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) feature_contrasts = PredictMD.generate_feature_contrasts( smoted_training_features_df, feature_names, ) logistic_classifier = PredictMD.singlelabelbinaryclassdataframelogisticclassifier( feature_names, single_label_name, single_label_levels; package = :GLM, intercept = true, interactions = 1, name = Logistic regression , ) PredictMD.fit!( logistic_classifier, smoted_training_features_df, smoted_training_labels_df, ) PredictMD.get_underlying(logistic_classifier) logistic_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram( logistic_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, single_label_levels, ); display(logistic_hist_training) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , logistic_hist_training.pdf , ), logistic_hist_training, ) logistic_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram( logistic_classifier, testing_features_df, testing_labels_df, single_label_name, single_label_levels, ); display(logistic_hist_testing) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , logistic_hist_testing.pdf , ), logistic_hist_testing, ) show( PredictMD.singlelabelbinaryclassificationmetrics( logistic_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) show( PredictMD.singlelabelbinaryclassificationmetrics( logistic_classifier, testing_features_df, testing_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) logistic_calibration_curve = PredictMD.plot_probability_calibration_curve( logistic_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, positive_class; window = 0.2, ); display(logistic_calibration_curve) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , logistic_calibration_curve.pdf , ), logistic_calibration_curve, ) show( PredictMD.probability_calibration_metrics( logistic_classifier, testing_features_df, testing_labels_df, single_label_name, positive_class; window = 0.1, ); allrows = true, allcols = true, splitcols = false, ) logistic_cutoffs, logistic_risk_group_prevalences = PredictMD.risk_score_cutoff_values( logistic_classifier, testing_features_df, testing_labels_df, single_label_name, positive_class; average_function = Statistics.mean, ) @info( string( Low risk: 0 to $(logistic_cutoffs[1]). , Medium risk: $(logistic_cutoffs[1]) to $(logistic_cutoffs[2]). , High risk: $(logistic_cutoffs[2]) to 1. , ) ) @info(logistic_risk_group_prevalences) logistic_cutoffs, logistic_risk_group_prevalences = PredictMD.risk_score_cutoff_values( logistic_classifier, testing_features_df, testing_labels_df, single_label_name, positive_class; average_function = Statistics.median, ) @info( string( Low risk: 0 to $(logistic_cutoffs[1]). , Medium risk: $(logistic_cutoffs[1]) to $(logistic_cutoffs[2]). , High risk: $(logistic_cutoffs[2]) to 1. , ) ) @info(logistic_risk_group_prevalences) logistic_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , logistic_classifier.jld2 , ) PredictMD.save_model(logistic_classifier_filename, logistic_classifier) ### End logistic classifier code This page was generated using Literate.jl .","title":"3. Logistic classifier"},{"location":"examples/cpu_examples/breast_cancer_biopsy/04_random_forest_classifier/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin random forest classifier code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) smoted_training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_features_df.csv , ) smoted_training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_labels_df.csv , ) smoted_training_features_df = DataFrames.DataFrame( FileIO.load( smoted_training_features_df_filename; type_detect_rows = 100, ) ) smoted_training_labels_df = DataFrames.DataFrame( FileIO.load( smoted_training_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :Class negative_class = benign positive_class = malignant single_label_levels = [negative_class, positive_class] categorical_label_names = Symbol[single_label_name] continuous_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) feature_contrasts = PredictMD.generate_feature_contrasts( smoted_training_features_df, feature_names, ) random_forest_classifier = PredictMD.single_labelmulticlassdataframerandomforestclassifier( feature_names, single_label_name, single_label_levels; nsubfeatures = 4, ntrees = 200, package = :DecisionTree, name = Random forest , feature_contrasts = feature_contrasts, ) PredictMD.fit!( random_forest_classifier, smoted_training_features_df, smoted_training_labels_df, ) random_forest_classifier_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram( random_forest_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, single_label_levels, ); display(random_forest_classifier_hist_training) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , random_forest_classifier_hist_training.pdf , ), random_forest_classifier_hist_training, ) random_forest_classifier_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram( random_forest_classifier, testing_features_df, testing_labels_df, single_label_name, single_label_levels, ); display(random_forest_classifier_hist_testing) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , random_forest_classifier_hist_testing.pdf , ), random_forest_classifier_hist_testing, ) show( PredictMD.singlelabelbinaryclassificationmetrics( random_forest_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) show( PredictMD.singlelabelbinaryclassificationmetrics( random_forest_classifier, testing_features_df, testing_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) random_forest_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , random_forest_classifier.jld2 , ) PredictMD.save_model( random_forest_classifier_filename, random_forest_classifier, ) ### End random forest classifier code This page was generated using Literate.jl .","title":"4. Random forest classifier"},{"location":"examples/cpu_examples/breast_cancer_biopsy/05_c_svc_svm_classifier/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin C-SVC code Kernel = LIBSVM.Kernel Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) smoted_training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_features_df.csv , ) smoted_training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_labels_df.csv , ) smoted_training_features_df = DataFrames.DataFrame( FileIO.load( smoted_training_features_df_filename; type_detect_rows = 100, ) ) smoted_training_labels_df = DataFrames.DataFrame( FileIO.load( smoted_training_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :Class negative_class = benign positive_class = malignant single_label_levels = [negative_class, positive_class] categorical_label_names = Symbol[single_label_name] continuous_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) feature_contrasts = PredictMD.generate_feature_contrasts( smoted_training_features_df, feature_names, ) c_svc_svm_classifier = PredictMD.single_labelmulticlassdataframesvmclassifier( feature_names, single_label_name, single_label_levels; package = :LIBSVM, svmtype = LIBSVM.SVC, name = SVM (C-SVC) , verbose = false, feature_contrasts = feature_contrasts, ) PredictMD.fit!( c_svc_svm_classifier, smoted_training_features_df, smoted_training_labels_df, ) c_svc_svm_classifier_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram( c_svc_svm_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, single_label_levels, ); display(c_svc_svm_classifier_hist_training) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , c_svc_svm_classifier_hist_training.pdf , ), c_svc_svm_classifier_hist_training, ) c_svc_svm_classifier_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram( c_svc_svm_classifier, testing_features_df, testing_labels_df, single_label_name, single_label_levels, ); display(c_svc_svm_classifier_hist_testing) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , c_svc_svm_classifier_hist_testing.pdf , ), c_svc_svm_classifier_hist_testing, ) show( PredictMD.singlelabelbinaryclassificationmetrics( c_svc_svm_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) show( PredictMD.singlelabelbinaryclassificationmetrics( c_svc_svm_classifier, testing_features_df, testing_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) c_svc_svm_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , c_svc_svm_classifier.jld2 , ) PredictMD.save_model(c_svc_svm_classifier_filename, c_svc_svm_classifier) ### End C-SVC code This page was generated using Literate.jl .","title":"5. C-SVC support vector machine classifier"},{"location":"examples/cpu_examples/breast_cancer_biopsy/06_nu_svc_svm_classifier/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin nu-SVC code Kernel = LIBSVM.Kernel Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) smoted_training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_features_df.csv , ) smoted_training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_labels_df.csv , ) smoted_training_features_df = DataFrames.DataFrame( FileIO.load( smoted_training_features_df_filename; type_detect_rows = 100, ) ) smoted_training_labels_df = DataFrames.DataFrame( FileIO.load( smoted_training_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :Class negative_class = benign positive_class = malignant single_label_levels = [negative_class, positive_class] categorical_label_names = Symbol[single_label_name] continuous_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) feature_contrasts = PredictMD.generate_feature_contrasts( smoted_training_features_df, feature_names, ) nu_svc_svm_classifier = PredictMD.single_labelmulticlassdataframesvmclassifier( feature_names, single_label_name, single_label_levels; package = :LIBSVM, svmtype = LIBSVM.NuSVC, name = SVM (nu-SVC) , verbose = false, feature_contrasts = feature_contrasts, ) PredictMD.fit!( nu_svc_svm_classifier, smoted_training_features_df, smoted_training_labels_df, ) nu_svc_svm_classifier_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram( nu_svc_svm_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, single_label_levels, ); display(nu_svc_svm_classifier_hist_training) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , nu_svc_svm_classifier_hist_training.pdf , ), nu_svc_svm_classifier_hist_training, ) nu_svc_svm_classifier_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram( nu_svc_svm_classifier, testing_features_df, testing_labels_df, single_label_name, single_label_levels, ); display(nu_svc_svm_classifier_hist_testing) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , nu_svc_svm_classifier_hist_testing.pdf , ), nu_svc_svm_classifier_hist_testing, ) show( PredictMD.singlelabelbinaryclassificationmetrics( nu_svc_svm_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) show( PredictMD.singlelabelbinaryclassificationmetrics( nu_svc_svm_classifier, testing_features_df, testing_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) nu_svc_svm_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , nu_svc_svm_classifier.jld2 , ) PredictMD.save_model( nu_svc_svm_classifier_filename, nu_svc_svm_classifier, ) ### End nu-SVC code This page was generated using Literate.jl .","title":"6. nu-SVC support vector machine classifier"},{"location":"examples/cpu_examples/breast_cancer_biopsy/07_knet_mlp_classifier/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin Knet neural network classifier code Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) smoted_training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_features_df.csv , ) smoted_training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_labels_df.csv , ) smoted_training_features_df = DataFrames.DataFrame( FileIO.load( smoted_training_features_df_filename; type_detect_rows = 100, ) ) smoted_training_labels_df = DataFrames.DataFrame( FileIO.load( smoted_training_labels_df_filename; type_detect_rows = 100, ) ) categorical_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , categorical_feature_names.jld2 , ) continuous_feature_names_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , continuous_feature_names.jld2 , ) categorical_feature_names = FileIO.load( categorical_feature_names_filename, categorical_feature_names , ) continuous_feature_names = FileIO.load( continuous_feature_names_filename, continuous_feature_names , ) feature_names = vcat(categorical_feature_names, continuous_feature_names) single_label_name = :Class negative_class = benign positive_class = malignant single_label_levels = [negative_class, positive_class] categorical_label_names = Symbol[single_label_name] continuous_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) knet_mlp_predict_function_source = function knetmlp_predict( w, x0::AbstractArray; probabilities::Bool = true, ) x1 = Knet.relu.( w[1]*x0 .+ w[2] ) x2 = Knet.relu.( w[3]*x1 .+ w[4] ) x3 = w[5]*x2 .+ w[6] unnormalizedlogprobs = x3 if probabilities normalizedlogprobs = Knet.logp(unnormalizedlogprobs; dims = 1) normalizedprobs = exp.(normalizedlogprobs) return normalizedprobs else return unnormalizedlogprobs end end knet_mlp_loss_function_source = function knetmlp_loss( predict::Function, modelweights, x::AbstractArray, ytrue::AbstractArray; L1::Real = Cfloat(0), L2::Real = Cfloat(0), ) loss = Knet.nll( predict( modelweights, x; probabilities = false, ), ytrue; dims = 1, ) if L1 != 0 loss += L1 * sum(sum(abs, w_i) for w_i in modelweights[1:2:end]) end if L2 != 0 loss += L2 * sum(sum(abs2, w_i) for w_i in modelweights[1:2:end]) end return loss end feature_contrasts = PredictMD.generate_feature_contrasts( smoted_training_features_df, feature_names, ) knetmlp_modelweights = Any[ Cfloat.( 0.1f0*randn(Cfloat,64,feature_contrasts.num_array_columns) ), Cfloat.( fill(Cfloat(0),64,1) ), Cfloat.( 0.1f0*randn(Cfloat,32,64) ), Cfloat.( fill(Cfloat(0),32,1) ), Cfloat.( 0.1f0*randn(Cfloat,2,32) ), Cfloat.( fill(Cfloat(0),2,1) ), ] knetmlp_losshyperparameters = Dict() knetmlp_losshyperparameters[:L1] = Cfloat(0.0) knetmlp_losshyperparameters[:L2] = Cfloat(0.0) knetmlp_optimizationalgorithm = :Momentum knetmlp_optimizerhyperparameters = Dict() knetmlp_minibatchsize = 48 knet_mlp_classifier = PredictMD.single_labelmulticlassdataframeknetclassifier( feature_names, single_label_name, single_label_levels; package = :Knet, name = Knet MLP , predict_function_source = knet_mlp_predict_function_source, loss_function_source = knet_mlp_loss_function_source, losshyperparameters = knetmlp_losshyperparameters, optimizationalgorithm = knetmlp_optimizationalgorithm, optimizerhyperparameters = knetmlp_optimizerhyperparameters, minibatchsize = knetmlp_minibatchsize, modelweights = knetmlp_modelweights, printlosseverynepochs = 1, maxepochs = 50, feature_contrasts = feature_contrasts, ) PredictMD.parse_functions!(knet_mlp_classifier) PredictMD.fit!( knet_mlp_classifier, smoted_training_features_df, smoted_training_labels_df, tuning_features_df, tuning_labels_df, ) PredictMD.set_max_epochs!(knet_mlp_classifier, 100) PredictMD.fit!( knet_mlp_classifier, smoted_training_features_df, smoted_training_labels_df, tuning_features_df, tuning_labels_df, ) knet_learningcurve_lossvsepoch = PredictMD.plotlearningcurve( knet_mlp_classifier, :loss_vs_epoch; ); display(knet_learningcurve_lossvsepoch) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_learningcurve_lossvsepoch.pdf , ), knet_learningcurve_lossvsepoch, ) knet_learningcurve_lossvsepoch_skip10epochs = PredictMD.plotlearningcurve( knet_mlp_classifier, :loss_vs_epoch; startat = 10, endat = :end, ); display(knet_learningcurve_lossvsepoch_skip10epochs) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_learningcurve_lossvsepoch_skip10epochs.pdf , ), knet_learningcurve_lossvsepoch_skip10epochs, ) knet_learningcurve_lossvsiteration = PredictMD.plotlearningcurve( knet_mlp_classifier, :loss_vs_iteration; window = 50, sampleevery = 10, ); display(knet_learningcurve_lossvsiteration) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_learningcurve_lossvsiteration.pdf , ), knet_learningcurve_lossvsiteration, ) knet_learningcurve_lossvsiteration_skip100iterations = PredictMD.plotlearningcurve( knet_mlp_classifier, :loss_vs_iteration; window = 50, sampleevery = 10, startat = 100, endat = :end, ); display(knet_learningcurve_lossvsiteration_skip100iterations) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_learningcurve_lossvsiteration_skip100iterations.pdf , ), knet_learningcurve_lossvsiteration_skip100iterations, ) knet_mlp_classifier_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram( knet_mlp_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, single_label_levels, ); display(knet_mlp_classifier_hist_training) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_mlp_classifier_hist_training.pdf , ), knet_mlp_classifier_hist_training, ) knet_mlp_classifier_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram( knet_mlp_classifier, testing_features_df, testing_labels_df, single_label_name, single_label_levels, ); display(knet_mlp_classifier_hist_testing) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , knet_mlp_classifier_hist_testing.pdf , ), knet_mlp_classifier_hist_testing, ) show( PredictMD.singlelabelbinaryclassificationmetrics( knet_mlp_classifier, smoted_training_features_df, smoted_training_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) show( PredictMD.singlelabelbinaryclassificationmetrics( knet_mlp_classifier, testing_features_df, testing_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) knet_mlp_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , knet_mlp_classifier.jld2 , ) PredictMD.save_model(knet_mlp_classifier_filename, knet_mlp_classifier) ### End Knet neural network classifier code This page was generated using Literate.jl .","title":"7. Knet neural network classifier"},{"location":"examples/cpu_examples/breast_cancer_biopsy/08_compare_models/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) ### End project-specific settings ### Begin model comparison code Kernel = LIBSVM.Kernel Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) smoted_training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_features_df.csv , ) smoted_training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_labels_df.csv , ) smoted_training_features_df = DataFrames.DataFrame( FileIO.load( smoted_training_features_df_filename; type_detect_rows = 100, ) ) smoted_training_labels_df = DataFrames.DataFrame( FileIO.load( smoted_training_labels_df_filename; type_detect_rows = 100, ) ) logistic_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , logistic_classifier.jld2 , ) random_forest_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , random_forest_classifier.jld2 , ) c_svc_svm_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , c_svc_svm_classifier.jld2 , ) nu_svc_svm_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , nu_svc_svm_classifier.jld2 , ) knet_mlp_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , knet_mlp_classifier.jld2 , ) logistic_classifier = PredictMD.load_model(logistic_classifier_filename) random_forest_classifier = PredictMD.load_model(random_forest_classifier_filename) c_svc_svm_classifier = PredictMD.load_model(c_svc_svm_classifier_filename) nu_svc_svm_classifier = PredictMD.load_model(nu_svc_svm_classifier_filename) knet_mlp_classifier = PredictMD.load_model(knet_mlp_classifier_filename) PredictMD.parse_functions!(knet_mlp_classifier) all_models = PredictMD.Fittable[ logistic_classifier, random_forest_classifier, c_svc_svm_classifier, nu_svc_svm_classifier, knet_mlp_classifier, ] single_label_name = :Class negative_class = benign positive_class = malignant single_label_levels = [negative_class, positive_class] categorical_label_names = Symbol[single_label_name] continuous_label_names = Symbol[] label_names = vcat(categorical_label_names, continuous_label_names) println( string( Single label binary classification metrics, training set, , fix sensitivity , ) ) show( PredictMD.singlelabelbinaryclassificationmetrics( all_models, training_features_df, training_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) println( string( Single label binary classification metrics, training set, , fix specificity , ) ) show( PredictMD.singlelabelbinaryclassificationmetrics( all_models, training_features_df, training_labels_df, single_label_name, positive_class; specificity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) println( string( Single label binary classification metrics, training set, , maximize F1 score , ) ) show( PredictMD.singlelabelbinaryclassificationmetrics( all_models, training_features_df, training_labels_df, single_label_name, positive_class; maximize = :f1score, ); allrows = true, allcols = true, splitcols = false, ) println( string( Single label binary classification metrics, training set, , maximize Cohen's kappa , ) ) show( PredictMD.singlelabelbinaryclassificationmetrics( all_models, training_features_df, training_labels_df, single_label_name, positive_class; maximize = :cohen_kappa, ); allrows = true, allcols = true, splitcols = false, ) println( string( Single label binary classification metrics, testing set, , fix sensitivity , ) ) show( PredictMD.singlelabelbinaryclassificationmetrics( all_models, testing_features_df, testing_labels_df, single_label_name, positive_class; sensitivity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) println( string( Single label binary classification metrics, testing set, , fix specificity , ) ) show( PredictMD.singlelabelbinaryclassificationmetrics( all_models, testing_features_df, testing_labels_df, single_label_name, positive_class; specificity = 0.95, ); allrows = true, allcols = true, splitcols = false, ) println( string( Single label binary classification metrics, testing set, , maximize F1 score , ) ) show( PredictMD.singlelabelbinaryclassificationmetrics( all_models, testing_features_df, testing_labels_df, single_label_name, positive_class; maximize = :f1score, ); allrows = true, allcols = true, splitcols = false, ) println( string( Single label binary classification metrics, testing set, , maximize Cohen's kappa , ) ) show( PredictMD.singlelabelbinaryclassificationmetrics( all_models, testing_features_df, testing_labels_df, single_label_name, positive_class; maximize = :cohen_kappa, ); allrows = true, allcols = true, splitcols = false, ) rocplottesting = PredictMD.plotroccurves( all_models, testing_features_df, testing_labels_df, single_label_name, positive_class, ); display(rocplottesting) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , rocplottesting.pdf , ), rocplottesting, ) prplottesting = PredictMD.plotprcurves( all_models, testing_features_df, testing_labels_df, single_label_name, positive_class, ); display(prplottesting) PredictMD.save_plot( joinpath( PROJECT_OUTPUT_DIRECTORY, plots , prplottesting.pdf , ), prplottesting, ) ### End model comparison code This page was generated using Literate.jl .","title":"8. Compare models"},{"location":"examples/cpu_examples/breast_cancer_biopsy/09_get_model_output/","text":"# This file was generated by PredictMD version 0.31.0-DEV, code name Unstable Angina # For help, please visit https://predictmd.net import PredictMDExtra import PredictMD ### Begin project-specific settings LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES = /home/travis/build/bcbi/PredictMD.jl/docs/src/examples PROJECT_OUTPUT_DIRECTORY = joinpath( LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output , ) mkpath(PROJECT_OUTPUT_DIRECTORY) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, data )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, models )) mkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, plots )) PredictMD.cache_to_path!( ; from = [ cpu_examples , breast_cancer_biopsy , output ,], to = [ LOCATION_OF_PREDICTMD_GENERATED_EXAMPLE_FILES, cpu_examples , breast_cancer_biopsy , output ,], ) ### End project-specific settings ### Begin model output code Kernel = LIBSVM.Kernel Random.seed!(999) trainingandtuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_features_df.csv , ) trainingandtuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , trainingandtuning_labels_df.csv , ) testing_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_features_df.csv , ) testing_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , testing_labels_df.csv , ) training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_features_df.csv , ) training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , training_labels_df.csv , ) tuning_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_features_df.csv , ) tuning_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , tuning_labels_df.csv , ) trainingandtuning_features_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_features_df_filename; type_detect_rows = 100, ) ) trainingandtuning_labels_df = DataFrames.DataFrame( FileIO.load( trainingandtuning_labels_df_filename; type_detect_rows = 100, ) ) testing_features_df = DataFrames.DataFrame( FileIO.load( testing_features_df_filename; type_detect_rows = 100, ) ) testing_labels_df = DataFrames.DataFrame( FileIO.load( testing_labels_df_filename; type_detect_rows = 100, ) ) training_features_df = DataFrames.DataFrame( FileIO.load( training_features_df_filename; type_detect_rows = 100, ) ) training_labels_df = DataFrames.DataFrame( FileIO.load( training_labels_df_filename; type_detect_rows = 100, ) ) tuning_features_df = DataFrames.DataFrame( FileIO.load( tuning_features_df_filename; type_detect_rows = 100, ) ) tuning_labels_df = DataFrames.DataFrame( FileIO.load( tuning_labels_df_filename; type_detect_rows = 100, ) ) smoted_training_features_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_features_df.csv , ) smoted_training_labels_df_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, data , smoted_training_labels_df.csv , ) smoted_training_features_df = DataFrames.DataFrame( FileIO.load( smoted_training_features_df_filename; type_detect_rows = 100, ) ) smoted_training_labels_df = DataFrames.DataFrame( FileIO.load( smoted_training_labels_df_filename; type_detect_rows = 100, ) ) logistic_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , logistic_classifier.jld2 , ) random_forest_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , random_forest_classifier.jld2 , ) c_svc_svm_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , c_svc_svm_classifier.jld2 , ) nu_svc_svm_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , nu_svc_svm_classifier.jld2 , ) knet_mlp_classifier_filename = joinpath( PROJECT_OUTPUT_DIRECTORY, models , knet_mlp_classifier.jld2 , ) logistic_classifier = PredictMD.load_model(logistic_classifier_filename) random_forest_classifier = PredictMD.load_model(random_forest_classifier_filename) c_svc_svm_classifier = PredictMD.load_model(c_svc_svm_classifier_filename) nu_svc_svm_classifier = PredictMD.load_model(nu_svc_svm_classifier_filename) knet_mlp_classifier = PredictMD.load_model(knet_mlp_classifier_filename) PredictMD.parse_functions!(knet_mlp_classifier) PredictMD.predict_proba( logistic_classifier, smoted_training_features_df, ) PredictMD.predict_proba( random_forest_classifier, smoted_training_features_df, ) PredictMD.predict_proba( c_svc_svm_classifier, smoted_training_features_df, ) PredictMD.predict_proba( nu_svc_svm_classifier, smoted_training_features_df, ) PredictMD.predict_proba( knet_mlp_classifier, smoted_training_features_df, ) PredictMD.predict_proba(logistic_classifier,testing_features_df,) PredictMD.predict_proba(random_forest_classifier,testing_features_df,) PredictMD.predict_proba(c_svc_svm_classifier,testing_features_df,) PredictMD.predict_proba(nu_svc_svm_classifier,testing_features_df,) PredictMD.predict_proba(knet_mlp_classifier,testing_features_df,) PredictMD.predict(logistic_classifier,smoted_training_features_df,) PredictMD.predict(random_forest_classifier,smoted_training_features_df,) PredictMD.predict(c_svc_svm_classifier,smoted_training_features_df,) PredictMD.predict(nu_svc_svm_classifier,smoted_training_features_df,) PredictMD.predict(knet_mlp_classifier,smoted_training_features_df,) PredictMD.predict(logistic_classifier,testing_features_df,) PredictMD.predict(random_forest_classifier,testing_features_df,) PredictMD.predict(c_svc_svm_classifier,testing_features_df,) PredictMD.predict(nu_svc_svm_classifier,testing_features_df,) PredictMD.predict(knet_mlp_classifier,testing_features_df,) ### End model output code This page was generated using Literate.jl .","title":"9. Directly access model output"},{"location":"generate_examples/generate_examples/","text":"Generating example files locally You can generate the example files using the generate_examples function. Instructions for using the generate_examples are given below. In the following code snippets, output_directory is the directory where you want to save the generated example files. output_directory should NOT be an existing directory. If output_directory already exists, you should delete it before running the generate_examples function. Generating scripts (.jl files) To generate the examples as Julia scripts (.jl files), use the following code. PredictMD.generate_examples(output_directory; scripts = true) Generating IJulia/Jupyter notebooks (.ipynb files) To generate the examples as IJulia/Jupyter notebooks (.ipynb files), use the following code. output_directory is the directory where you want to save the generated example files. output_directory should NOT be an existing directory. If output_directory already exists, you should delete it before running the generate_examples function. PredictMD.generate_examples(output_directory; notebooks = true)","title":"Generating these example files on your computer"},{"location":"generate_examples/generate_examples/#generating-example-files-locally","text":"You can generate the example files using the generate_examples function. Instructions for using the generate_examples are given below. In the following code snippets, output_directory is the directory where you want to save the generated example files. output_directory should NOT be an existing directory. If output_directory already exists, you should delete it before running the generate_examples function.","title":"Generating example files locally"},{"location":"generate_examples/generate_examples/#generating-scripts-jl-files","text":"To generate the examples as Julia scripts (.jl files), use the following code. PredictMD.generate_examples(output_directory; scripts = true)","title":"Generating scripts (.jl files)"},{"location":"generate_examples/generate_examples/#generating-ijuliajupyter-notebooks-ipynb-files","text":"To generate the examples as IJulia/Jupyter notebooks (.ipynb files), use the following code. output_directory is the directory where you want to save the generated example files. output_directory should NOT be an existing directory. If output_directory already exists, you should delete it before running the generate_examples function. PredictMD.generate_examples(output_directory; notebooks = true)","title":"Generating IJulia/Jupyter notebooks (.ipynb files)"},{"location":"library/internals/","text":"Documentation of internals Documentation of internals Modules Constants Types Functions Macros Index Modules # PredictMD.PredictMD Module . source # PredictMD.Cleaning Module . source # PredictMD.Compilation Module . source # PredictMD.GPU Module . source # PredictMD.Server Module . source Constants Types # PredictMD.AbstractEstimator Type . AbstractEstimator source # PredictMD.AbstractFeatureContrasts Type . AbstractFeatureContrasts source # PredictMD.AbstractPipeline Type . AbstractPipeline source # PredictMD.AbstractPlot Type . AbstractPlot{T} source # PredictMD.AbstractTransformer Type . AbstractTransformer source # PredictMD.DataFrameFeatureContrasts Type . source # PredictMD.DataFrameFeatureContrasts Method . source # PredictMD.DecisionTreeModel Type . source # PredictMD.GLMModel Type . source # PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer Type . source # PredictMD.ImmutableFeatureArrayTransposerTransformer Type . source # PredictMD.ImmutablePackageMultiLabelPredictionTransformer Type . source # PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer Type . source # PredictMD.ImmutablePackageSingleLabelPredictionTransformer Type . source # PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer Type . source # PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer Type . source # PredictMD.KnetModel Type . source # PredictMD.LIBSVMModel Type . source # PredictMD.MutableDataFrame2ClassificationKnetTransformer Type . source # PredictMD.MutableDataFrame2DecisionTreeTransformer Type . source # PredictMD.MutableDataFrame2RegressionKnetTransformer Type . source # PredictMD.SimplePipeline Type . source # PredictMD.SimplePipeline Method . source Functions # PredictMD.DataFrame2LIBSVMTransformer Method . source # PredictMD.accuracy Method . source # PredictMD.auprc Method . source # PredictMD.aurocc Method . source # PredictMD.averageprecisionscore Method . source # PredictMD.avg_precision Method . source # PredictMD.binary_brier_score Method . binary_brier_score(ytrue, yscore) Computes the binary formulation of the Brier score, defined as: \\frac{1}{N}\\sum\\limits _{t=1}^{N}(f_t-o_t)^2 \\,\\! Lower values are better. Best value is 0. source # PredictMD.calculate_smote_pct_under Method . source # PredictMD.check_column_types Method . source # PredictMD.cohen_kappa Method . source # PredictMD.cohen_kappa Method . source # PredictMD.cohen_kappa Method . source # PredictMD.compute_contingency_table Method . source # PredictMD.compute_contingency_table Method . source # PredictMD.convert_value_to_missing! Function . source # PredictMD.delete_nothings! Method . source # PredictMD.f1score Method . source # PredictMD.false_negative_rate Method . source # PredictMD.false_positive_rate Method . source # PredictMD.fbetascore Method . source # PredictMD.filename_extension Method . source # PredictMD.fit! Function . source # PredictMD.fit! Function . source # PredictMD.fit! Function . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fix_column_types! Method . source # PredictMD.fix_type Function . source # PredictMD.generate_feature_contrasts Method . source # PredictMD.generate_formula Method . source # PredictMD.generate_formula Method . source # PredictMD.generate_formula Method . source # PredictMD.generate_formula Method . source # PredictMD.generate_interaction_terms Method . source # PredictMD.get_binary_thresholds Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.getallrocnums Method . source # PredictMD.getlabelint2stringmap Method . source # PredictMD.getlabelstring2intmap Method . source # PredictMD.icd9_code_to_single_level_dx_ccs Method . source # PredictMD.inverse Method . source # PredictMD.is_appveyor_ci Function . source # PredictMD.is_ci Function . source # PredictMD.is_ci_or_runtests Function . source # PredictMD.is_ci_or_runtests_or_docs_or_examples Function . source # PredictMD.is_deploy_docs Function . source # PredictMD.is_docs_or_examples Function . source # PredictMD.is_make_docs Function . source # PredictMD.is_make_examples Function . source # PredictMD.is_nothing Function . source # PredictMD.is_one_to_one Method . source # PredictMD.is_runtests Function . source # PredictMD.is_square Method . source # PredictMD.is_travis_ci Function . source # PredictMD.is_travis_ci_on_apple Function . source # PredictMD.is_travis_ci_on_linux Function . source # PredictMD.load_model Method . source # PredictMD.mean_square_error Method . mean_square_error(ytrue, ypred) source # PredictMD.multilabelprobabilitiestopredictions Method . source # PredictMD.negative_predictive_value Method . source # PredictMD.open_plots_during_tests Function . source # PredictMD.package_directory Method . package_directory(parts...)::String Equivalent to abspath(joinpath(abspath(package_directory()), parts...)) . source # PredictMD.package_directory Method . package_directory(f::Function, types::Tuple)::String If function f with type signature types is part of a Julia package, returns the package root directory. If function f with type signature types is not part of a Julia package, throws an error. source # PredictMD.package_directory Method . package_directory(f::Function)::String If function f is part of a Julia package, returns the package root directory. If function f is not part of a Julia package, throws an error. source # PredictMD.package_directory Method . package_directory(m::Method)::String If method m is part of a Julia package, returns the package root directory. If method m is not part of a Julia package, throws an error. source # PredictMD.package_directory Method . package_directory(m::Module, parts...)::String Equivalent to result = abspath(joinpath(abspath(package_directory(m)), parts...)) . source # PredictMD.package_directory Method . package_directory(m::Module)::String If module m is part of a Julia package, returns the package root directory. If module m is not part of a Julia package, throws an error. source # PredictMD.package_directory Method . package_directory()::String Return the PredictMD package directory. source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.plot_probability_calibration_curve Method . source # PredictMD.plot_probability_calibration_curve Method . source # PredictMD.plotlearningcurves Function . source # PredictMD.plotlearningcurves Function . source # PredictMD.plotlearningcurves Method . source # PredictMD.plotprcurves Method . source # PredictMD.plotprcurves Method . source # PredictMD.plotroccurves Method . source # PredictMD.plotroccurves Method . source # PredictMD.plotsinglelabelbinaryclassifierhistogram Method . source # PredictMD.plotsinglelabelregressiontrueversuspredicted Method . source # PredictMD.positive_predictive_value Method . source # PredictMD.prcurve Method . source # PredictMD.prcurve Method . source # PredictMD.precision Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predictionsassoctodataframe Function . source # PredictMD.probability_calibration_metrics Function . source # PredictMD.probability_calibration_metrics Method . source # PredictMD.probability_calibration_scores_and_fractions Method . source # PredictMD.probability_calibration_scores_and_fractions Method . source # PredictMD.r2_score Method . r2_score(ytrue, ypred) Computes coefficient of determination. Higher values are better. Best value is 1. source # PredictMD.recall Method . source # PredictMD.risk_score_cutoff_values Method . source # PredictMD.risk_score_cutoff_values Method . source # PredictMD.roccurve Method . source # PredictMD.roccurve Method . source # PredictMD.root_mean_square_error Method . root_mean_square_error(ytrue, ypred) source # PredictMD.save_model Method . source # PredictMD.sensitivity Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_max_epochs! Method . source # PredictMD.set_max_epochs! Method . source # PredictMD.set_max_epochs! Method . source # PredictMD.shuffle_rows! Method . source # PredictMD.shuffle_rows! Method . source # PredictMD.simple_linear_regression Method . simple_linear_regression(x::AbstractVector, y::AbstractVector) Simple linear regression - given a set of two-dimensional points (x, y), use the ordinary least squares method to find the best fit line of the form y = a + b*x (where a and b are real numbers) and return the tuple (a, b). source # PredictMD.simple_moving_average Method . source # PredictMD.single_labeldataframeknetregression Method . source # PredictMD.single_labeldataframeknetregression_Knet Method . source # PredictMD.single_labeldataframelinearregression Method . source # PredictMD.single_labeldataframelinearregression_GLM Method . source # PredictMD.single_labeldataframerandomforestregression Method . source # PredictMD.single_labeldataframerandomforestregression_DecisionTree Method . source # PredictMD.single_labeldataframesvmregression Method . source # PredictMD.single_labeldataframesvmregression_LIBSVM Method . source # PredictMD.single_labelmulticlassdataframeknetclassifier Method . source # PredictMD.single_labelmulticlassdataframeknetclassifier_Knet Method . source # PredictMD.single_labelmulticlassdataframerandomforestclassifier Method . source # PredictMD.single_labelmulticlassdataframesvmclassifier Method . source # PredictMD.single_labelmulticlassdataframesvmclassifier_LIBSVM Method . source # PredictMD.single_labelmulticlassdfrandomforestclassifier_DecisionTree Method . source # PredictMD.single_labelprobabilitiestopredictions Method . source # PredictMD.singlelabelbinaryclassdataframelogisticclassifier Method . source # PredictMD.singlelabelbinaryclassdataframelogisticclassifier_GLM Method . source # PredictMD.singlelabelbinaryclassdataframeprobitclassifier Method . source # PredictMD.singlelabelbinaryclassdataframeprobitclassifier_GLM Method . source # PredictMD.singlelabelbinaryclassificationmetrics Method . source # PredictMD.singlelabelbinaryclassificationmetrics Method . source # PredictMD.singlelabelbinaryclassificationmetrics_resultdict Method . source # PredictMD.singlelabelbinaryclassificationmetrics_tunableparam Method . source # PredictMD.singlelabelbinaryyscore Method . source # PredictMD.singlelabelbinaryytrue Method . source # PredictMD.singlelabelregressionmetrics Method . source # PredictMD.singlelabelregressionmetrics Method . source # PredictMD.singlelabelregressionmetrics_resultdict Method . source # PredictMD.singlelabelregressionypred Method . source # PredictMD.singlelabelregressionytrue Method . source # PredictMD.smote Method . source # PredictMD.smote Method . source # PredictMD.specificity Method . source # PredictMD.split_data Method . source # PredictMD.split_data Method . source # PredictMD.transform Function . source # PredictMD.transform Function . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform_columns! Function . source # PredictMD.trapz Method . trapz(x, y) Compute the area under the curve of 2-dimensional points (x, y) using the trapezoidal method. source # PredictMD.true_negative_rate Method . source # PredictMD.true_positive_rate Method . source # PredictMD.tuplify Function . source # PredictMD.underlying Method . source # PredictMD.version Method . version(f::Function, types::Tuple)::VersionNumber If function f with type signature types is part of a Julia package, returns the version number of that package. If function f with type signature types is not part of a Julia package, throws an error. source # PredictMD.version Method . version(f::Function)::VersionNumber If function f is part of a Julia package, returns the version number of that package. If function f is not part of a Julia package, throws an error. source # PredictMD.version Method . version(m::Method)::VersionNumber If method m is part of a Julia package, returns the version number of that package. If method m is not part of a Julia package, throws an error. source # PredictMD.version Method . version(m::Module)::VersionNumber If module m is part of a Julia package, returns the version number of that package. If module m is not part of a Julia package, throws an error. source # PredictMD.version Method . version()::VersionNumber Return the version number of PredictMD. source # PredictMD.version_codename Method . version_codename(f::Function, types::Tuple)::String If function f with type signature types is part of a Julia package, returns the version code name of that package. If function f with type signature types is not part of a Julia package, throws an error. source # PredictMD.version_codename Method . version_codename(f::Function)::String If function f is part of a Julia package, returns the version code name of that package. If function f is not part of a Julia package, throws an error. source # PredictMD.version_codename Method . version_codename(m::Method)::String If method m is part of a Julia package, returns the version code name of that package. If method m is not part of a Julia package, throws an error. source # PredictMD.version_codename Method . version_codename(m::Module)::String If module m is part of a Julia package, returns the version code name of that package. If module m is not part of a Julia package, throws an error. source # PredictMD.version_codename Method . version_codename()::String Return the version code name of PredictMD. source # PredictMD.Cleaning.ccs_onehot_names Function . Given a dataframe, return the column names corresponding to CCS \"one-hot\" columns. Examples import CSVFiles import FileIO import PredictMD df = DataFrames.DataFrame( FileIO.load( MY_CSV_FILE_NAME; type_detect_rows = 30_000, ) ) @info(PredictMD.Cleaning.ccs_onehot_names(df)) @info(PredictMD.Cleaning.ccs_onehot_names(df, ccs_onehot_ )) source # PredictMD.Cleaning.clean_hcup_nis_csv_icd9 Method . Given a single ICD 9 code, import the relevant patients from the Health Care Utilization Project (HCUP) National Inpatient Sample (NIS) database. Examples: import CSVFiles import FileIO import PredictMD icd_code_list = [ 8841 ] icd_code_type=:procedure input_file_name_list = [ ./data/nis_2012_core.csv , ./data/nis_2013_core.csv , ./data/nis_2014_core.csv , ] output_file_name = ./output/hcup_nis_pr_8841.csv PredictMD.Cleaning.clean_hcup_nis_csv_icd9( icd_code_list, input_file_name_list, output_file_name; icd_code_type=icd_code_type, rows_for_type_detect = 30_000, ) df = DataFrames.DataFrame( FileIO.load( output_file_name; type_detect_rows = 30_000, ) ) @info(PredictMD.Cleaning.ccs_onehot_names(df)) source # PredictMD.Cleaning.column_names_with_prefix Method . source # PredictMD.Cleaning.symbol_begins_with Method . source # PredictMD.Cleaning.x_contains_y Method . source Macros Index PredictMD.Cleaning PredictMD.Compilation PredictMD.GPU PredictMD.PredictMD PredictMD.Server PredictMD.AbstractEstimator PredictMD.AbstractFeatureContrasts PredictMD.AbstractPipeline PredictMD.AbstractPlot PredictMD.AbstractTransformer PredictMD.DataFrameFeatureContrasts PredictMD.DataFrameFeatureContrasts PredictMD.DecisionTreeModel PredictMD.GLMModel PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer PredictMD.ImmutableFeatureArrayTransposerTransformer PredictMD.ImmutablePackageMultiLabelPredictionTransformer PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer PredictMD.ImmutablePackageSingleLabelPredictionTransformer PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer PredictMD.KnetModel PredictMD.LIBSVMModel PredictMD.MutableDataFrame2ClassificationKnetTransformer PredictMD.MutableDataFrame2DecisionTreeTransformer PredictMD.MutableDataFrame2RegressionKnetTransformer PredictMD.SimplePipeline PredictMD.SimplePipeline PredictMD.Cleaning.ccs_onehot_names PredictMD.Cleaning.clean_hcup_nis_csv_icd9 PredictMD.Cleaning.column_names_with_prefix PredictMD.Cleaning.symbol_begins_with PredictMD.Cleaning.x_contains_y PredictMD.DataFrame2LIBSVMTransformer PredictMD.accuracy PredictMD.auprc PredictMD.aurocc PredictMD.averageprecisionscore PredictMD.avg_precision PredictMD.binary_brier_score PredictMD.calculate_smote_pct_under PredictMD.check_column_types PredictMD.cohen_kappa PredictMD.cohen_kappa PredictMD.cohen_kappa PredictMD.compute_contingency_table PredictMD.compute_contingency_table PredictMD.convert_value_to_missing! PredictMD.delete_nothings! PredictMD.f1score PredictMD.false_negative_rate PredictMD.false_positive_rate PredictMD.fbetascore PredictMD.filename_extension PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fix_column_types! PredictMD.fix_type PredictMD.generate_feature_contrasts PredictMD.generate_formula PredictMD.generate_formula PredictMD.generate_formula PredictMD.generate_formula PredictMD.generate_interaction_terms PredictMD.get_binary_thresholds PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.getallrocnums PredictMD.getlabelint2stringmap PredictMD.getlabelstring2intmap PredictMD.icd9_code_to_single_level_dx_ccs PredictMD.inverse PredictMD.is_appveyor_ci PredictMD.is_ci PredictMD.is_ci_or_runtests PredictMD.is_ci_or_runtests_or_docs_or_examples PredictMD.is_deploy_docs PredictMD.is_docs_or_examples PredictMD.is_make_docs PredictMD.is_make_examples PredictMD.is_nothing PredictMD.is_one_to_one PredictMD.is_runtests PredictMD.is_square PredictMD.is_travis_ci PredictMD.is_travis_ci_on_apple PredictMD.is_travis_ci_on_linux PredictMD.load_model PredictMD.mean_square_error PredictMD.multilabelprobabilitiestopredictions PredictMD.negative_predictive_value PredictMD.open_plots_during_tests PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.plot_probability_calibration_curve PredictMD.plot_probability_calibration_curve PredictMD.plotlearningcurves PredictMD.plotlearningcurves PredictMD.plotlearningcurves PredictMD.plotprcurves PredictMD.plotprcurves PredictMD.plotroccurves PredictMD.plotroccurves PredictMD.plotsinglelabelbinaryclassifierhistogram PredictMD.plotsinglelabelregressiontrueversuspredicted PredictMD.positive_predictive_value PredictMD.prcurve PredictMD.prcurve PredictMD.precision PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predictionsassoctodataframe PredictMD.probability_calibration_metrics PredictMD.probability_calibration_metrics PredictMD.probability_calibration_scores_and_fractions PredictMD.probability_calibration_scores_and_fractions PredictMD.r2_score PredictMD.recall PredictMD.risk_score_cutoff_values PredictMD.risk_score_cutoff_values PredictMD.roccurve PredictMD.roccurve PredictMD.root_mean_square_error PredictMD.save_model PredictMD.sensitivity PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_max_epochs! PredictMD.set_max_epochs! PredictMD.set_max_epochs! PredictMD.shuffle_rows! PredictMD.shuffle_rows! PredictMD.simple_linear_regression PredictMD.simple_moving_average PredictMD.single_labeldataframeknetregression PredictMD.single_labeldataframeknetregression_Knet PredictMD.single_labeldataframelinearregression PredictMD.single_labeldataframelinearregression_GLM PredictMD.single_labeldataframerandomforestregression PredictMD.single_labeldataframerandomforestregression_DecisionTree PredictMD.single_labeldataframesvmregression PredictMD.single_labeldataframesvmregression_LIBSVM PredictMD.single_labelmulticlassdataframeknetclassifier PredictMD.single_labelmulticlassdataframeknetclassifier_Knet PredictMD.single_labelmulticlassdataframerandomforestclassifier PredictMD.single_labelmulticlassdataframesvmclassifier PredictMD.single_labelmulticlassdataframesvmclassifier_LIBSVM PredictMD.single_labelmulticlassdfrandomforestclassifier_DecisionTree PredictMD.single_labelprobabilitiestopredictions PredictMD.singlelabelbinaryclassdataframelogisticclassifier PredictMD.singlelabelbinaryclassdataframelogisticclassifier_GLM PredictMD.singlelabelbinaryclassdataframeprobitclassifier PredictMD.singlelabelbinaryclassdataframeprobitclassifier_GLM PredictMD.singlelabelbinaryclassificationmetrics PredictMD.singlelabelbinaryclassificationmetrics PredictMD.singlelabelbinaryclassificationmetrics_resultdict PredictMD.singlelabelbinaryclassificationmetrics_tunableparam PredictMD.singlelabelbinaryyscore PredictMD.singlelabelbinaryytrue PredictMD.singlelabelregressionmetrics PredictMD.singlelabelregressionmetrics PredictMD.singlelabelregressionmetrics_resultdict PredictMD.singlelabelregressionypred PredictMD.singlelabelregressionytrue PredictMD.smote PredictMD.smote PredictMD.specificity PredictMD.split_data PredictMD.split_data PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform_columns! PredictMD.trapz PredictMD.true_negative_rate PredictMD.true_positive_rate PredictMD.tuplify PredictMD.underlying PredictMD.version PredictMD.version PredictMD.version PredictMD.version PredictMD.version PredictMD.version_codename PredictMD.version_codename PredictMD.version_codename PredictMD.version_codename PredictMD.version_codename","title":"Internals"},{"location":"library/internals/#documentation-of-internals","text":"Documentation of internals Modules Constants Types Functions Macros Index","title":"Documentation of internals"},{"location":"library/internals/#modules","text":"# PredictMD.PredictMD Module . source # PredictMD.Cleaning Module . source # PredictMD.Compilation Module . source # PredictMD.GPU Module . source # PredictMD.Server Module . source","title":"Modules"},{"location":"library/internals/#constants","text":"","title":"Constants"},{"location":"library/internals/#types","text":"# PredictMD.AbstractEstimator Type . AbstractEstimator source # PredictMD.AbstractFeatureContrasts Type . AbstractFeatureContrasts source # PredictMD.AbstractPipeline Type . AbstractPipeline source # PredictMD.AbstractPlot Type . AbstractPlot{T} source # PredictMD.AbstractTransformer Type . AbstractTransformer source # PredictMD.DataFrameFeatureContrasts Type . source # PredictMD.DataFrameFeatureContrasts Method . source # PredictMD.DecisionTreeModel Type . source # PredictMD.GLMModel Type . source # PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer Type . source # PredictMD.ImmutableFeatureArrayTransposerTransformer Type . source # PredictMD.ImmutablePackageMultiLabelPredictionTransformer Type . source # PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer Type . source # PredictMD.ImmutablePackageSingleLabelPredictionTransformer Type . source # PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer Type . source # PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer Type . source # PredictMD.KnetModel Type . source # PredictMD.LIBSVMModel Type . source # PredictMD.MutableDataFrame2ClassificationKnetTransformer Type . source # PredictMD.MutableDataFrame2DecisionTreeTransformer Type . source # PredictMD.MutableDataFrame2RegressionKnetTransformer Type . source # PredictMD.SimplePipeline Type . source # PredictMD.SimplePipeline Method . source","title":"Types"},{"location":"library/internals/#functions","text":"# PredictMD.DataFrame2LIBSVMTransformer Method . source # PredictMD.accuracy Method . source # PredictMD.auprc Method . source # PredictMD.aurocc Method . source # PredictMD.averageprecisionscore Method . source # PredictMD.avg_precision Method . source # PredictMD.binary_brier_score Method . binary_brier_score(ytrue, yscore) Computes the binary formulation of the Brier score, defined as: \\frac{1}{N}\\sum\\limits _{t=1}^{N}(f_t-o_t)^2 \\,\\! Lower values are better. Best value is 0. source # PredictMD.calculate_smote_pct_under Method . source # PredictMD.check_column_types Method . source # PredictMD.cohen_kappa Method . source # PredictMD.cohen_kappa Method . source # PredictMD.cohen_kappa Method . source # PredictMD.compute_contingency_table Method . source # PredictMD.compute_contingency_table Method . source # PredictMD.convert_value_to_missing! Function . source # PredictMD.delete_nothings! Method . source # PredictMD.f1score Method . source # PredictMD.false_negative_rate Method . source # PredictMD.false_positive_rate Method . source # PredictMD.fbetascore Method . source # PredictMD.filename_extension Method . source # PredictMD.fit! Function . source # PredictMD.fit! Function . source # PredictMD.fit! Function . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fit! Method . source # PredictMD.fix_column_types! Method . source # PredictMD.fix_type Function . source # PredictMD.generate_feature_contrasts Method . source # PredictMD.generate_formula Method . source # PredictMD.generate_formula Method . source # PredictMD.generate_formula Method . source # PredictMD.generate_formula Method . source # PredictMD.generate_interaction_terms Method . source # PredictMD.get_binary_thresholds Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_history Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.get_underlying Method . source # PredictMD.getallrocnums Method . source # PredictMD.getlabelint2stringmap Method . source # PredictMD.getlabelstring2intmap Method . source # PredictMD.icd9_code_to_single_level_dx_ccs Method . source # PredictMD.inverse Method . source # PredictMD.is_appveyor_ci Function . source # PredictMD.is_ci Function . source # PredictMD.is_ci_or_runtests Function . source # PredictMD.is_ci_or_runtests_or_docs_or_examples Function . source # PredictMD.is_deploy_docs Function . source # PredictMD.is_docs_or_examples Function . source # PredictMD.is_make_docs Function . source # PredictMD.is_make_examples Function . source # PredictMD.is_nothing Function . source # PredictMD.is_one_to_one Method . source # PredictMD.is_runtests Function . source # PredictMD.is_square Method . source # PredictMD.is_travis_ci Function . source # PredictMD.is_travis_ci_on_apple Function . source # PredictMD.is_travis_ci_on_linux Function . source # PredictMD.load_model Method . source # PredictMD.mean_square_error Method . mean_square_error(ytrue, ypred) source # PredictMD.multilabelprobabilitiestopredictions Method . source # PredictMD.negative_predictive_value Method . source # PredictMD.open_plots_during_tests Function . source # PredictMD.package_directory Method . package_directory(parts...)::String Equivalent to abspath(joinpath(abspath(package_directory()), parts...)) . source # PredictMD.package_directory Method . package_directory(f::Function, types::Tuple)::String If function f with type signature types is part of a Julia package, returns the package root directory. If function f with type signature types is not part of a Julia package, throws an error. source # PredictMD.package_directory Method . package_directory(f::Function)::String If function f is part of a Julia package, returns the package root directory. If function f is not part of a Julia package, throws an error. source # PredictMD.package_directory Method . package_directory(m::Method)::String If method m is part of a Julia package, returns the package root directory. If method m is not part of a Julia package, throws an error. source # PredictMD.package_directory Method . package_directory(m::Module, parts...)::String Equivalent to result = abspath(joinpath(abspath(package_directory(m)), parts...)) . source # PredictMD.package_directory Method . package_directory(m::Module)::String If module m is part of a Julia package, returns the package root directory. If module m is not part of a Julia package, throws an error. source # PredictMD.package_directory Method . package_directory()::String Return the PredictMD package directory. source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.parse_functions! Method . source # PredictMD.plot_probability_calibration_curve Method . source # PredictMD.plot_probability_calibration_curve Method . source # PredictMD.plotlearningcurves Function . source # PredictMD.plotlearningcurves Function . source # PredictMD.plotlearningcurves Method . source # PredictMD.plotprcurves Method . source # PredictMD.plotprcurves Method . source # PredictMD.plotroccurves Method . source # PredictMD.plotroccurves Method . source # PredictMD.plotsinglelabelbinaryclassifierhistogram Method . source # PredictMD.plotsinglelabelregressiontrueversuspredicted Method . source # PredictMD.positive_predictive_value Method . source # PredictMD.prcurve Method . source # PredictMD.prcurve Method . source # PredictMD.precision Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predict_proba Method . source # PredictMD.predictionsassoctodataframe Function . source # PredictMD.probability_calibration_metrics Function . source # PredictMD.probability_calibration_metrics Method . source # PredictMD.probability_calibration_scores_and_fractions Method . source # PredictMD.probability_calibration_scores_and_fractions Method . source # PredictMD.r2_score Method . r2_score(ytrue, ypred) Computes coefficient of determination. Higher values are better. Best value is 1. source # PredictMD.recall Method . source # PredictMD.risk_score_cutoff_values Method . source # PredictMD.risk_score_cutoff_values Method . source # PredictMD.roccurve Method . source # PredictMD.roccurve Method . source # PredictMD.root_mean_square_error Method . root_mean_square_error(ytrue, ypred) source # PredictMD.save_model Method . source # PredictMD.sensitivity Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_feature_contrasts! Method . source # PredictMD.set_max_epochs! Method . source # PredictMD.set_max_epochs! Method . source # PredictMD.set_max_epochs! Method . source # PredictMD.shuffle_rows! Method . source # PredictMD.shuffle_rows! Method . source # PredictMD.simple_linear_regression Method . simple_linear_regression(x::AbstractVector, y::AbstractVector) Simple linear regression - given a set of two-dimensional points (x, y), use the ordinary least squares method to find the best fit line of the form y = a + b*x (where a and b are real numbers) and return the tuple (a, b). source # PredictMD.simple_moving_average Method . source # PredictMD.single_labeldataframeknetregression Method . source # PredictMD.single_labeldataframeknetregression_Knet Method . source # PredictMD.single_labeldataframelinearregression Method . source # PredictMD.single_labeldataframelinearregression_GLM Method . source # PredictMD.single_labeldataframerandomforestregression Method . source # PredictMD.single_labeldataframerandomforestregression_DecisionTree Method . source # PredictMD.single_labeldataframesvmregression Method . source # PredictMD.single_labeldataframesvmregression_LIBSVM Method . source # PredictMD.single_labelmulticlassdataframeknetclassifier Method . source # PredictMD.single_labelmulticlassdataframeknetclassifier_Knet Method . source # PredictMD.single_labelmulticlassdataframerandomforestclassifier Method . source # PredictMD.single_labelmulticlassdataframesvmclassifier Method . source # PredictMD.single_labelmulticlassdataframesvmclassifier_LIBSVM Method . source # PredictMD.single_labelmulticlassdfrandomforestclassifier_DecisionTree Method . source # PredictMD.single_labelprobabilitiestopredictions Method . source # PredictMD.singlelabelbinaryclassdataframelogisticclassifier Method . source # PredictMD.singlelabelbinaryclassdataframelogisticclassifier_GLM Method . source # PredictMD.singlelabelbinaryclassdataframeprobitclassifier Method . source # PredictMD.singlelabelbinaryclassdataframeprobitclassifier_GLM Method . source # PredictMD.singlelabelbinaryclassificationmetrics Method . source # PredictMD.singlelabelbinaryclassificationmetrics Method . source # PredictMD.singlelabelbinaryclassificationmetrics_resultdict Method . source # PredictMD.singlelabelbinaryclassificationmetrics_tunableparam Method . source # PredictMD.singlelabelbinaryyscore Method . source # PredictMD.singlelabelbinaryytrue Method . source # PredictMD.singlelabelregressionmetrics Method . source # PredictMD.singlelabelregressionmetrics Method . source # PredictMD.singlelabelregressionmetrics_resultdict Method . source # PredictMD.singlelabelregressionypred Method . source # PredictMD.singlelabelregressionytrue Method . source # PredictMD.smote Method . source # PredictMD.smote Method . source # PredictMD.specificity Method . source # PredictMD.split_data Method . source # PredictMD.split_data Method . source # PredictMD.transform Function . source # PredictMD.transform Function . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform Method . source # PredictMD.transform_columns! Function . source # PredictMD.trapz Method . trapz(x, y) Compute the area under the curve of 2-dimensional points (x, y) using the trapezoidal method. source # PredictMD.true_negative_rate Method . source # PredictMD.true_positive_rate Method . source # PredictMD.tuplify Function . source # PredictMD.underlying Method . source # PredictMD.version Method . version(f::Function, types::Tuple)::VersionNumber If function f with type signature types is part of a Julia package, returns the version number of that package. If function f with type signature types is not part of a Julia package, throws an error. source # PredictMD.version Method . version(f::Function)::VersionNumber If function f is part of a Julia package, returns the version number of that package. If function f is not part of a Julia package, throws an error. source # PredictMD.version Method . version(m::Method)::VersionNumber If method m is part of a Julia package, returns the version number of that package. If method m is not part of a Julia package, throws an error. source # PredictMD.version Method . version(m::Module)::VersionNumber If module m is part of a Julia package, returns the version number of that package. If module m is not part of a Julia package, throws an error. source # PredictMD.version Method . version()::VersionNumber Return the version number of PredictMD. source # PredictMD.version_codename Method . version_codename(f::Function, types::Tuple)::String If function f with type signature types is part of a Julia package, returns the version code name of that package. If function f with type signature types is not part of a Julia package, throws an error. source # PredictMD.version_codename Method . version_codename(f::Function)::String If function f is part of a Julia package, returns the version code name of that package. If function f is not part of a Julia package, throws an error. source # PredictMD.version_codename Method . version_codename(m::Method)::String If method m is part of a Julia package, returns the version code name of that package. If method m is not part of a Julia package, throws an error. source # PredictMD.version_codename Method . version_codename(m::Module)::String If module m is part of a Julia package, returns the version code name of that package. If module m is not part of a Julia package, throws an error. source # PredictMD.version_codename Method . version_codename()::String Return the version code name of PredictMD. source # PredictMD.Cleaning.ccs_onehot_names Function . Given a dataframe, return the column names corresponding to CCS \"one-hot\" columns. Examples import CSVFiles import FileIO import PredictMD df = DataFrames.DataFrame( FileIO.load( MY_CSV_FILE_NAME; type_detect_rows = 30_000, ) ) @info(PredictMD.Cleaning.ccs_onehot_names(df)) @info(PredictMD.Cleaning.ccs_onehot_names(df, ccs_onehot_ )) source # PredictMD.Cleaning.clean_hcup_nis_csv_icd9 Method . Given a single ICD 9 code, import the relevant patients from the Health Care Utilization Project (HCUP) National Inpatient Sample (NIS) database. Examples: import CSVFiles import FileIO import PredictMD icd_code_list = [ 8841 ] icd_code_type=:procedure input_file_name_list = [ ./data/nis_2012_core.csv , ./data/nis_2013_core.csv , ./data/nis_2014_core.csv , ] output_file_name = ./output/hcup_nis_pr_8841.csv PredictMD.Cleaning.clean_hcup_nis_csv_icd9( icd_code_list, input_file_name_list, output_file_name; icd_code_type=icd_code_type, rows_for_type_detect = 30_000, ) df = DataFrames.DataFrame( FileIO.load( output_file_name; type_detect_rows = 30_000, ) ) @info(PredictMD.Cleaning.ccs_onehot_names(df)) source # PredictMD.Cleaning.column_names_with_prefix Method . source # PredictMD.Cleaning.symbol_begins_with Method . source # PredictMD.Cleaning.x_contains_y Method . source","title":"Functions"},{"location":"library/internals/#macros","text":"","title":"Macros"},{"location":"library/internals/#index","text":"PredictMD.Cleaning PredictMD.Compilation PredictMD.GPU PredictMD.PredictMD PredictMD.Server PredictMD.AbstractEstimator PredictMD.AbstractFeatureContrasts PredictMD.AbstractPipeline PredictMD.AbstractPlot PredictMD.AbstractTransformer PredictMD.DataFrameFeatureContrasts PredictMD.DataFrameFeatureContrasts PredictMD.DecisionTreeModel PredictMD.GLMModel PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer PredictMD.ImmutableFeatureArrayTransposerTransformer PredictMD.ImmutablePackageMultiLabelPredictionTransformer PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer PredictMD.ImmutablePackageSingleLabelPredictionTransformer PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer PredictMD.KnetModel PredictMD.LIBSVMModel PredictMD.MutableDataFrame2ClassificationKnetTransformer PredictMD.MutableDataFrame2DecisionTreeTransformer PredictMD.MutableDataFrame2RegressionKnetTransformer PredictMD.SimplePipeline PredictMD.SimplePipeline PredictMD.Cleaning.ccs_onehot_names PredictMD.Cleaning.clean_hcup_nis_csv_icd9 PredictMD.Cleaning.column_names_with_prefix PredictMD.Cleaning.symbol_begins_with PredictMD.Cleaning.x_contains_y PredictMD.DataFrame2LIBSVMTransformer PredictMD.accuracy PredictMD.auprc PredictMD.aurocc PredictMD.averageprecisionscore PredictMD.avg_precision PredictMD.binary_brier_score PredictMD.calculate_smote_pct_under PredictMD.check_column_types PredictMD.cohen_kappa PredictMD.cohen_kappa PredictMD.cohen_kappa PredictMD.compute_contingency_table PredictMD.compute_contingency_table PredictMD.convert_value_to_missing! PredictMD.delete_nothings! PredictMD.f1score PredictMD.false_negative_rate PredictMD.false_positive_rate PredictMD.fbetascore PredictMD.filename_extension PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fit! PredictMD.fix_column_types! PredictMD.fix_type PredictMD.generate_feature_contrasts PredictMD.generate_formula PredictMD.generate_formula PredictMD.generate_formula PredictMD.generate_formula PredictMD.generate_interaction_terms PredictMD.get_binary_thresholds PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_history PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.get_underlying PredictMD.getallrocnums PredictMD.getlabelint2stringmap PredictMD.getlabelstring2intmap PredictMD.icd9_code_to_single_level_dx_ccs PredictMD.inverse PredictMD.is_appveyor_ci PredictMD.is_ci PredictMD.is_ci_or_runtests PredictMD.is_ci_or_runtests_or_docs_or_examples PredictMD.is_deploy_docs PredictMD.is_docs_or_examples PredictMD.is_make_docs PredictMD.is_make_examples PredictMD.is_nothing PredictMD.is_one_to_one PredictMD.is_runtests PredictMD.is_square PredictMD.is_travis_ci PredictMD.is_travis_ci_on_apple PredictMD.is_travis_ci_on_linux PredictMD.load_model PredictMD.mean_square_error PredictMD.multilabelprobabilitiestopredictions PredictMD.negative_predictive_value PredictMD.open_plots_during_tests PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.package_directory PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.parse_functions! PredictMD.plot_probability_calibration_curve PredictMD.plot_probability_calibration_curve PredictMD.plotlearningcurves PredictMD.plotlearningcurves PredictMD.plotlearningcurves PredictMD.plotprcurves PredictMD.plotprcurves PredictMD.plotroccurves PredictMD.plotroccurves PredictMD.plotsinglelabelbinaryclassifierhistogram PredictMD.plotsinglelabelregressiontrueversuspredicted PredictMD.positive_predictive_value PredictMD.prcurve PredictMD.prcurve PredictMD.precision PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predict_proba PredictMD.predictionsassoctodataframe PredictMD.probability_calibration_metrics PredictMD.probability_calibration_metrics PredictMD.probability_calibration_scores_and_fractions PredictMD.probability_calibration_scores_and_fractions PredictMD.r2_score PredictMD.recall PredictMD.risk_score_cutoff_values PredictMD.risk_score_cutoff_values PredictMD.roccurve PredictMD.roccurve PredictMD.root_mean_square_error PredictMD.save_model PredictMD.sensitivity PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_feature_contrasts! PredictMD.set_max_epochs! PredictMD.set_max_epochs! PredictMD.set_max_epochs! PredictMD.shuffle_rows! PredictMD.shuffle_rows! PredictMD.simple_linear_regression PredictMD.simple_moving_average PredictMD.single_labeldataframeknetregression PredictMD.single_labeldataframeknetregression_Knet PredictMD.single_labeldataframelinearregression PredictMD.single_labeldataframelinearregression_GLM PredictMD.single_labeldataframerandomforestregression PredictMD.single_labeldataframerandomforestregression_DecisionTree PredictMD.single_labeldataframesvmregression PredictMD.single_labeldataframesvmregression_LIBSVM PredictMD.single_labelmulticlassdataframeknetclassifier PredictMD.single_labelmulticlassdataframeknetclassifier_Knet PredictMD.single_labelmulticlassdataframerandomforestclassifier PredictMD.single_labelmulticlassdataframesvmclassifier PredictMD.single_labelmulticlassdataframesvmclassifier_LIBSVM PredictMD.single_labelmulticlassdfrandomforestclassifier_DecisionTree PredictMD.single_labelprobabilitiestopredictions PredictMD.singlelabelbinaryclassdataframelogisticclassifier PredictMD.singlelabelbinaryclassdataframelogisticclassifier_GLM PredictMD.singlelabelbinaryclassdataframeprobitclassifier PredictMD.singlelabelbinaryclassdataframeprobitclassifier_GLM PredictMD.singlelabelbinaryclassificationmetrics PredictMD.singlelabelbinaryclassificationmetrics PredictMD.singlelabelbinaryclassificationmetrics_resultdict PredictMD.singlelabelbinaryclassificationmetrics_tunableparam PredictMD.singlelabelbinaryyscore PredictMD.singlelabelbinaryytrue PredictMD.singlelabelregressionmetrics PredictMD.singlelabelregressionmetrics PredictMD.singlelabelregressionmetrics_resultdict PredictMD.singlelabelregressionypred PredictMD.singlelabelregressionytrue PredictMD.smote PredictMD.smote PredictMD.specificity PredictMD.split_data PredictMD.split_data PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform PredictMD.transform_columns! PredictMD.trapz PredictMD.true_negative_rate PredictMD.true_positive_rate PredictMD.tuplify PredictMD.underlying PredictMD.version PredictMD.version PredictMD.version PredictMD.version PredictMD.version PredictMD.version_codename PredictMD.version_codename PredictMD.version_codename PredictMD.version_codename PredictMD.version_codename","title":"Index"}]}