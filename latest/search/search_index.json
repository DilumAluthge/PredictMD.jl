{
    "docs": [
        {
            "location": "/", 
            "text": "PredictMD.jl Documentation", 
            "title": "Home"
        }, 
        {
            "location": "/#predictmdjl-documentation", 
            "text": "", 
            "title": "PredictMD.jl Documentation"
        }, 
        {
            "location": "/examples/cpu/boston_housing/01_preprocess_data/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport GZip\nimport PredictMD\nimport StatsBase\n\ndf = CSV.read(\n    GZip.gzopen(\n        joinpath(\n            Pkg.dir(\nRDatasets\n),\n            \ndata\n,\n            \nMASS\n,\n            \nBoston.csv.gz\n,\n            ),\n        ),\n    DataFrames.DataFrame,\n    )\n\nDataFrames.dropmissing!(df)\n\nPredictMD.shuffle_rows!(df)\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :Crim,\n    :Zn,\n    :Indus,\n    :Chas,\n    :NOx,\n    :Rm,\n    :Age,\n    :Dis,\n    :Rad,\n    :Tax,\n    :PTRatio,\n    :Black,\n    :LStat,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :MedV\nlabelnames = [singlelabelname]\n\nfeatures_df = df[featurenames]\nlabels_df = df[labelnames]\n\nDataFrames.describe(labels_df[singlelabelname])\n\ntrainingandvalidation_features_df,\n    trainingandvalidation_labels_df,\n    testing_features_df,\n    testing_labels_df = PredictMD.split_data(\n        features_df,\n        labels_df,\n        0.75,\n        )\ntraining_features_df,\n    training_labels_df,\n    validation_features_df,\n    validation_labels_df = PredictMD.split_data(\n        trainingandvalidation_features_df,\n        trainingandvalidation_labels_df,\n        2/3,\n        )\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nboston_housing_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\nCSV.write(\n    trainingandvalidation_features_df_filename,\n    trainingandvalidation_features_df,\n    )\nCSV.write(\n    trainingandvalidation_labels_df_filename,\n    trainingandvalidation_labels_df,\n    )\nCSV.write(\n    testing_features_df_filename,\n    testing_features_df,\n    )\nCSV.write(\n    testing_labels_df_filename,\n    testing_labels_df,\n    )\nCSV.write(\n    training_features_df_filename,\n    training_features_df,\n    )\nCSV.write(\n    training_labels_df_filename,\n    training_labels_df,\n    )\nCSV.write(\n    validation_features_df_filename,\n    validation_features_df,\n    )\nCSV.write(\n    validation_labels_df_filename,\n    validation_labels_df,\n    )\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "1. Preprocess data"
        }, 
        {
            "location": "/examples/cpu/boston_housing/02_linear_regression/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nboston_housing_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :Crim,\n    :Zn,\n    :Indus,\n    :Chas,\n    :NOx,\n    :Rm,\n    :Age,\n    :Dis,\n    :Rad,\n    :Tax,\n    :PTRatio,\n    :Black,\n    :LStat,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :MedV\nlabelnames = [singlelabelname]\n\nlinear_regression = PredictMD.singlelabeldataframelinearregression(\n    featurenames,\n    singlelabelname;\n    package = :GLMjl,\n    intercept = true,\n    interactions = 2,\n    name = \nLinear regression\n,\n    )\n\nPredictMD.fit!(linear_regression,training_features_df,training_labels_df,)\n\nPredictMD.get_underlying(linear_regression)\n\nlinear_regression_plot_training = PredictMD.plotsinglelabelregressiontrueversuspredicted(\n    linear_regression,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    )\nPredictMD.open_plot(linear_regression_plot_training)\n\nlinear_regression_plot_testing = PredictMD.plotsinglelabelregressiontrueversuspredicted(\n    linear_regression,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname\n    )\nPredictMD.open_plot(linear_regression_plot_testing)\n\nPredictMD.singlelabelregressionmetrics(\n    linear_regression,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    )\n\nPredictMD.singlelabelregressionmetrics(\n    linear_regression,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    )\n\nlinear_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nlinear_regression.jld2\n,\n    )\n\nPredictMD.save_model(linear_regression_filename, linear_regression)\n\n\n\n\nINFO: INFO Starting to train GLM.jl model.\nINFO: INFO Finished training GLM.jl model.\nINFO: DEBUG Skipping opening file during Travis build: /tmp/julia6L0QKi.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliacsT4eS.svg\nINFO: INFO Attempting to save model...\nINFO: INFO Saved model to file \n/tmp/boston_housing_example/linear_regression.jld2\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "2. Linear regression"
        }, 
        {
            "location": "/examples/cpu/boston_housing/03_random_forest_regression/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nboston_housing_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :Crim,\n    :Zn,\n    :Indus,\n    :Chas,\n    :NOx,\n    :Rm,\n    :Age,\n    :Dis,\n    :Rad,\n    :Tax,\n    :PTRatio,\n    :Black,\n    :LStat,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :MedV\nlabelnames = [singlelabelname]\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(training_features_df, featurenames)\n\nrandom_forest_regression = PredictMD.singlelabeldataframerandomforestregression(\n    featurenames,\n    singlelabelname;\n    nsubfeatures = 2,\n    ntrees = 20,\n    package = :DecisionTreejl,\n    name = \nRandom forest\n,\n    feature_contrasts = feature_contrasts,\n    )\n\nPredictMD.fit!(random_forest_regression,training_features_df,training_labels_df,)\n\nrandom_forest_regression_plot_training = PredictMD.plotsinglelabelregressiontrueversuspredicted(\n    random_forest_regression,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    )\nPredictMD.open_plot(random_forest_regression_plot_training)\n\nrandom_forest_regression_plot_testing = PredictMD.plotsinglelabelregressiontrueversuspredicted(\n    random_forest_regression,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    )\nPredictMD.open_plot(random_forest_regression_plot_testing)\n\nPredictMD.singlelabelregressionmetrics(\n    random_forest_regression,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    )\n\nPredictMD.singlelabelregressionmetrics(\n    random_forest_regression,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    )\n\nrandom_forest_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nrandom_forest_regression.jld2\n,\n    )\n\nPredictMD.save_model(random_forest_regression_filename, random_forest_regression)\n\n\n\n\nINFO: INFO Starting to train DecisionTree.jl model.\nINFO: INFO Finished training DecisionTree.jl model.\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaeaYCdn.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaSAJT0I.svg\nINFO: INFO Attempting to save model...\nINFO: INFO Saved model to file \n/tmp/boston_housing_example/random_forest_regression.jld2\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "3. Random forest regression"
        }, 
        {
            "location": "/examples/cpu/boston_housing/04_knet_mlp_regression/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport Knet\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nboston_housing_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :Crim,\n    :Zn,\n    :Indus,\n    :Chas,\n    :NOx,\n    :Rm,\n    :Age,\n    :Dis,\n    :Rad,\n    :Tax,\n    :PTRatio,\n    :Black,\n    :LStat,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :MedV\nlabelnames = [singlelabelname]\n\nknet_mlp_predict_function_source = \n\nfunction knetmlp_predict(\n        w,\n        x0::AbstractArray,\n        )\n    x1 = Knet.relu.( w[1]*x0 .+ w[2] )\n    x2 = w[3]*x1 .+ w[4]\n    return x2\nend\n\n\n\nknet_mlp_loss_function_source = \n\nfunction knetmlp_loss(\n        predict_function::Function,\n        modelweights,\n        x::AbstractArray,\n        ytrue::AbstractArray;\n        L1::Real = Cfloat(0),\n        L2::Real = Cfloat(0),\n        )\n    loss = mean(\n        abs2,\n        ytrue - predict_function(\n            modelweights,\n            x,\n            ),\n        )\n    if L1 != 0\n        loss += L1 * sum(sum(abs, w_i) for w_i in modelweights[1:2:end])\n    end\n    if L2 != 0\n        loss += L2 * sum(sum(abs2, w_i) for w_i in modelweights[1:2:end])\n    end\n    return loss\nend\n\n\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(training_features_df, featurenames)\n\nknetmlp_modelweights = Any[\n    Cfloat.(\n        0.1f0*randn(Cfloat,10,feature_contrasts.num_array_columns)\n        ),\n    Cfloat.(\n        zeros(Cfloat,10,1)\n        ),\n    Cfloat.(\n        0.1f0*randn(Cfloat,1,10)\n        ),\n    Cfloat.(\n        zeros(Cfloat,1,1),\n        ),\n    ]\n\nknetmlp_losshyperparameters = Dict()\nknetmlp_losshyperparameters[:L1] = Cfloat(0.0)\nknetmlp_losshyperparameters[:L2] = Cfloat(0.0)\nknetmlp_optimizationalgorithm = :Adam\nknetmlp_optimizerhyperparameters = Dict()\nknetmlp_minibatchsize = 48\nknetmlp_maxepochs = 1_000\n\nknet_mlp_regression = PredictMD.singlelabeldataframeknetregression(\n    featurenames,\n    singlelabelname;\n    package = :Knetjl,\n    name = \nKnet MLP\n,\n    predict_function_source = knet_mlp_predict_function_source,\n    loss_function_source = knet_mlp_loss_function_source,\n    losshyperparameters = knetmlp_losshyperparameters,\n    optimizationalgorithm = knetmlp_optimizationalgorithm,\n    optimizerhyperparameters = knetmlp_optimizerhyperparameters,\n    minibatchsize = knetmlp_minibatchsize,\n    modelweights = knetmlp_modelweights,\n    maxepochs = knetmlp_maxepochs,\n    printlosseverynepochs = 100,\n    feature_contrasts = feature_contrasts,\n    )\n\nPredictMD.parse_functions!(knet_mlp_regression)\n\nPredictMD.fit!(\n    knet_mlp_regression,\n    training_features_df,\n    training_labels_df,\n    validation_features_df,\n    validation_labels_df,\n    )\n\nknet_learningcurve_lossvsepoch = PredictMD.plotlearningcurve(\n    knet_mlp_regression,\n    :loss_vs_epoch;\n    )\nPredictMD.open_plot(knet_learningcurve_lossvsepoch)\n\nknet_learningcurve_lossvsepoch_skip10epochs = PredictMD.plotlearningcurve(\n    knet_mlp_regression,\n    :loss_vs_epoch;\n    startat = 10,\n    endat = :end,\n    )\nPredictMD.open_plot(knet_learningcurve_lossvsepoch_skip10epochs)\n\nknet_learningcurve_lossvsiteration = PredictMD.plotlearningcurve(\n    knet_mlp_regression,\n    :loss_vs_iteration;\n    window = 50,\n    sampleevery = 10,\n    )\nPredictMD.open_plot(knet_learningcurve_lossvsiteration)\n\nknet_learningcurve_lossvsiteration_skip100iterations = PredictMD.plotlearningcurve(\n    knet_mlp_regression,\n    :loss_vs_iteration;\n    window = 50,\n    sampleevery = 10,\n    startat = 100,\n    endat = :end,\n    )\nPredictMD.open_plot(knet_learningcurve_lossvsiteration_skip100iterations)\n\nknet_mlp_regression_plot_training = PredictMD.plotsinglelabelregressiontrueversuspredicted(\n    knet_mlp_regression,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    )\nPredictMD.open_plot(knet_mlp_regression_plot_training)\n\nknet_mlp_regression_plot_testing = PredictMD.plotsinglelabelregressiontrueversuspredicted(\n    knet_mlp_regression,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    )\nPredictMD.open_plot(knet_mlp_regression_plot_testing)\n\nPredictMD.singlelabelregressionmetrics(\n    knet_mlp_regression,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    )\n\nPredictMD.singlelabelregressionmetrics(\n    knet_mlp_regression,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    )\n\nknet_mlp_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nknet_mlp_regression.jld2\n,\n    )\n\nPredictMD.save_model(knet_mlp_regression_filename, knet_mlp_regression)\n\n\n\n\nWARNING: Method definition knetmlp_predict(Any, AbstractArray{T, N} where N where T) in module PredictMD at none:6 overwritten at none:5.\nWARNING: Method definition knetmlp_loss(Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD at none:9 overwritten at none:9.\nWARNING: Method definition #knetmlp_loss(Array{Any, 1}, typeof(PredictMD.knetmlp_loss), Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD overwritten.\nINFO: INFO Starting to train Knet.jl model. Max epochs: 1000.\nINFO: INFO Epoch: 0. Loss (training set): 1751.7725. Loss (validation set): 1717.2460402149204.\nINFO: INFO Epoch: 100. Loss (training set): 66.09934. Loss (validation set): 70.65888454908776.\nINFO: INFO Epoch: 200. Loss (training set): 51.591682. Loss (validation set): 57.197285541622215.\nINFO: INFO Epoch: 300. Loss (training set): 41.914547. Loss (validation set): 44.88992654763992.\nINFO: INFO Epoch: 400. Loss (training set): 36.16381. Loss (validation set): 35.09895554782976.\nINFO: INFO Epoch: 500. Loss (training set): 29.710537. Loss (validation set): 28.507831686788524.\nINFO: INFO Epoch: 600. Loss (training set): 26.416058. Loss (validation set): 24.191826766418025.\nINFO: INFO Epoch: 700. Loss (training set): 23.775814. Loss (validation set): 21.54392504220271.\nINFO: INFO Epoch: 800. Loss (training set): 21.598675. Loss (validation set): 20.519193721460965.\nINFO: INFO Epoch: 900. Loss (training set): 19.214457. Loss (validation set): 18.209233432557223.\nINFO: INFO Epoch: 1000. Loss (training set): 17.76278. Loss (validation set): 17.120117709759242.\nINFO: INFO Finished training Knet.jl model.\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaqYm1mY.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliacXqVVf.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaGnA7tD.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaYps7F4.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliasssfDz.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliauMgBc8.svg\nINFO: INFO Attempting to save model...\nINFO: INFO Saved model to file \n/tmp/boston_housing_example/knet_mlp_regression.jld2\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "4. Knet neural network regression"
        }, 
        {
            "location": "/examples/cpu/boston_housing/05_compare_models/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport Knet\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nboston_housing_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nlinear_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nlinear_regression.jld2\n,\n    )\nrandom_forest_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nrandom_forest_regression.jld2\n,\n    )\nknet_mlp_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nknet_mlp_regression.jld2\n,\n    )\n\nlinear_regression = PredictMD.load_model(linear_regression_filename)\nrandom_forest_regression = PredictMD.load_model(random_forest_regression_filename)\nknet_mlp_regression = PredictMD.load_model(knet_mlp_regression_filename)\nPredictMD.parse_functions!(knet_mlp_regression)\n\nall_models = PredictMD.Fittable[\n    linear_regression,\n    random_forest_regression,\n    knet_mlp_regression,\n    ]\n\nsinglelabelname = :MedV\n\nshowall(PredictMD.singlelabelregressionmetrics(\n    all_models,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    ))\n\nshowall(PredictMD.singlelabelregressionmetrics(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    ))\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "5. Compare models"
        }, 
        {
            "location": "/examples/cpu/boston_housing/06_get_model_output/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport Knet\nimport PredictMD\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nlinear_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nlinear_regression.jld2\n,\n    )\nrandom_forest_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nrandom_forest_regression.jld2\n,\n    )\nknet_mlp_regression_filename = joinpath(\n    tempdir(),\n    \nboston_housing_example\n,\n    \nknet_mlp_regression.jld2\n,\n    )\n\nlinear_regression = PredictMD.load_model(linear_regression_filename)\nrandom_forest_regression = PredictMD.load_model(random_forest_regression_filename)\nknet_mlp_regression = PredictMD.load_model(knet_mlp_regression_filename)\nPredictMD.parse_functions!(knet_mlp_regression)\n\nPredictMD.predict(linear_regression,training_features_df,)\nPredictMD.predict(random_forest_regression,training_features_df,)\nPredictMD.predict(knet_mlp_regression,training_features_df,)\n\nPredictMD.predict(linear_regression,testing_features_df,)\nPredictMD.predict(random_forest_regression,testing_features_df,)\nPredictMD.predict(knet_mlp_regression,testing_features_df,)\n\n\n\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/boston_housing_example/linear_regression.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/boston_housing_example/random_forest_regression.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/boston_housing_example/knet_mlp_regression.jld2\n\nWARNING: Method definition knetmlp_predict(Any, AbstractArray{T, N} where N where T) in module PredictMD at none:6 overwritten at none:5.\nWARNING: Method definition knetmlp_loss(Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD at none:9 overwritten at none:9.\nWARNING: Method definition #knetmlp_loss(Array{Any, 1}, typeof(PredictMD.knetmlp_loss), Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD overwritten.\n126\u00d71 DataFrames.DataFrame\n\u2502 Row \u2502 MedV    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 43.2657 \u2502\n\u2502 2   \u2502 38.367  \u2502\n\u2502 3   \u2502 19.0059 \u2502\n\u2502 4   \u2502 24.7577 \u2502\n\u2502 5   \u2502 7.1735  \u2502\n\u2502 6   \u2502 6.40599 \u2502\n\u2502 7   \u2502 19.4495 \u2502\n\u2502 8   \u2502 33.5594 \u2502\n\u22ee\n\u2502 118 \u2502 27.421  \u2502\n\u2502 119 \u2502 19.2045 \u2502\n\u2502 120 \u2502 16.2741 \u2502\n\u2502 121 \u2502 7.73533 \u2502\n\u2502 122 \u2502 23.8556 \u2502\n\u2502 123 \u2502 21.5028 \u2502\n\u2502 124 \u2502 18.3388 \u2502\n\u2502 125 \u2502 19.0699 \u2502\n\u2502 126 \u2502 23.3085 \u2502\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "6. Directly access model output"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/01_preprocess_data/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport PredictMD\nimport RDatasets\nimport StatsBase\n\ndf = RDatasets.dataset(\nMASS\n, \nbiopsy\n)\n\nDataFrames.dropmissing!(df)\n\nPredictMD.shuffle_rows!(df)\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :V1,\n    :V2,\n    :V3,\n    :V4,\n    :V5,\n    :V6,\n    :V7,\n    :V8,\n    :V9,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :Class\nnegativeclass = \nbenign\n\npositiveclass = \nmalignant\n\nsinglelabellevels = [negativeclass, positiveclass]\n\nlabelnames = [singlelabelname]\n\nfeatures_df = df[featurenames]\nlabels_df = df[labelnames]\n\ntrainingandvalidation_features_df,\n    trainingandvalidation_labels_df,\n    testing_features_df,\n    testing_labels_df = PredictMD.split_data(\n        features_df,\n        labels_df,\n        0.75,\n        )\ntraining_features_df,\n    training_labels_df,\n    validation_features_df,\n    validation_labels_df = PredictMD.split_data(\n        trainingandvalidation_features_df,\n        trainingandvalidation_labels_df,\n        2/3,\n        )\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nbreast_cancer_biopsy_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\nCSV.write(\n    trainingandvalidation_features_df_filename,\n    trainingandvalidation_features_df,\n    )\nCSV.write(\n    trainingandvalidation_labels_df_filename,\n    trainingandvalidation_labels_df,\n    )\nCSV.write(\n    testing_features_df_filename,\n    testing_features_df,\n    )\nCSV.write(\n    testing_labels_df_filename,\n    testing_labels_df,\n    )\nCSV.write(\n    training_features_df_filename,\n    training_features_df,\n    )\nCSV.write(\n    training_labels_df_filename,\n    training_labels_df,\n    )\nCSV.write(\n    validation_features_df_filename,\n    validation_features_df,\n    )\nCSV.write(\n    validation_labels_df_filename,\n    validation_labels_df,\n    )\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "1. Preprocess data"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/02_smote/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport PredictMD\nimport StatsBase\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nbreast_cancer_biopsy_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :V1,\n    :V2,\n    :V3,\n    :V4,\n    :V5,\n    :V6,\n    :V7,\n    :V8,\n    :V9,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :Class\nnegativeclass = \nbenign\n\npositiveclass = \nmalignant\n\nsinglelabellevels = [negativeclass, positiveclass]\n\nDataFrames.describe(training_labels_df[singlelabelname])\nStatsBase.countmap(training_labels_df[singlelabelname])\n\nmajorityclass = \nbenign\n\nminorityclass = \nmalignant\n\n\nsmoted_training_features_df, smoted_training_labels_df = PredictMD.smote(\n    training_features_df,\n    training_labels_df,\n    featurenames,\n    singlelabelname;\n    majorityclass = majorityclass,\n    minorityclass = minorityclass,\n    pct_over = 100,\n    minority_to_majority_ratio = 1.0,\n    k = 5,\n    )\n\nDataFrames.describe(smoted_training_labels_df[singlelabelname])\nStatsBase.countmap(smoted_training_labels_df[singlelabelname])\n\n\nsmoted_training_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_features_df.csv\n,\n    )\nsmoted_training_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_labels_df.csv\n,\n    )\nCSV.write(\n    smoted_training_features_df_filename,\n    smoted_training_features_df,\n    )\nCSV.write(\n    smoted_training_labels_df_filename,\n    smoted_training_labels_df,\n    )\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "2. Apply SMOTE algorithm"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/03_logistic_classifier/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nbreast_cancer_biopsy_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_features_df.csv\n,\n    )\nsmoted_training_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_labels_df.csv\n,\n    )\nsmoted_training_features_df = CSV.read(\n    smoted_training_features_df_filename,\n    DataFrames.DataFrame,\n    )\nsmoted_training_labels_df = CSV.read(\n    smoted_training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :V1,\n    :V2,\n    :V3,\n    :V4,\n    :V5,\n    :V6,\n    :V7,\n    :V8,\n    :V9,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :Class\nnegativeclass = \nbenign\n\npositiveclass = \nmalignant\n\nsinglelabellevels = [negativeclass, positiveclass]\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    featurenames,\n    )\n\nlogistic_classifier = PredictMD.singlelabelbinaryclassdataframelogisticclassifier(\n    featurenames,\n    singlelabelname,\n    singlelabellevels;\n    package = :GLMjl,\n    intercept = true,\n    interactions = 1,\n    name = \nLogistic regression\n,\n    )\n\nPredictMD.fit!(\n    logistic_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    )\n\nPredictMD.get_underlying(logistic_classifier)\n\nlogistic_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    logistic_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(logistic_hist_training)\n\nlogistic_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    logistic_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(logistic_hist_testing)\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    logistic_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    logistic_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nlogistic_calibration_curve = PredictMD.plot_probability_calibration_curve(\n    logistic_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    positiveclass;\n    window = 0.2,\n    )\nPredictMD.open_plot(logistic_calibration_curve)\n\nPredictMD.probability_calibration_metrics(\n    logistic_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    window = 0.1,\n    )\n\nlogistic_cutoffs, logistic_risk_group_prevalences = PredictMD.risk_score_cutoff_values(\n    logistic_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    average_function = mean,\n    )\nprintln(\n    string(\n        \nLow risk: 0 to $(logistic_cutoffs[1]).\n,\n        \n Medium risk: $(logistic_cutoffs[1]) to $(logistic_cutoffs[2]).\n,\n        \n High risk: $(logistic_cutoffs[2]) to 1.\n,\n        )\n    )\nshowall(logistic_risk_group_prevalences)\nlogistic_cutoffs, logistic_risk_group_prevalences = PredictMD.risk_score_cutoff_values(\n    logistic_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    average_function = median,\n    )\nprintln(\n    string(\n        \nLow risk: 0 to $(logistic_cutoffs[1]).\n,\n        \n Medium risk: $(logistic_cutoffs[1]) to $(logistic_cutoffs[2]).\n,\n        \n High risk: $(logistic_cutoffs[2]) to 1.\n,\n        )\n    )\nshowall(logistic_risk_group_prevalences)\n\nlogistic_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nlogistic_classifier.jld2\n,\n    )\n\nPredictMD.save_model(logistic_classifier_filename, logistic_classifier)\n\n\n\n\nINFO: INFO Starting to train GLM.jl model.\nINFO: INFO Finished training GLM.jl model.\nINFO: DEBUG Skipping opening file during Travis build: /tmp/julia6m4yeL.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaRbZaFE.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaD1DzmA.svg\nLow risk: 0 to 0.05857493355870247. Medium risk: 0.05857493355870247 to 0.9342752695083618. High risk: 0.9342752695083618 to 1.\n3\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 Risk_group  \u2502 Arithmetic_mean \u2502 Median \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 Low risk    \u2502 0.0             \u2502 0.0    \u2502\n\u2502 2   \u2502 Medium risk \u2502 0.473684        \u2502 0.0    \u2502\n\u2502 3   \u2502 High risk   \u2502 0.943396        \u2502 1.0    \u2502Low risk: 0 to 0.0027055598329752684. Medium risk: 0.0027055598329752684 to 0.9998404383659363. High risk: 0.9998404383659363 to 1.\n3\u00d73 DataFrames.DataFrame\n\u2502 Row \u2502 Risk_group  \u2502 Arithmetic_mean \u2502 Median \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 Low risk    \u2502 0.0             \u2502 0.0    \u2502\n\u2502 2   \u2502 Medium risk \u2502 0.326087        \u2502 0.0    \u2502\n\u2502 3   \u2502 High risk   \u2502 1.0             \u2502 1.0    \u2502INFO: INFO Attempting to save model...\nINFO: INFO Saved model to file \n/tmp/breast_cancer_biopsy_example/logistic_classifier.jld2\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "3. Logistic classifier"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/04_random_forest_classifier/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nbreast_cancer_biopsy_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_features_df.csv\n,\n    )\nsmoted_training_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_labels_df.csv\n,\n    )\nsmoted_training_features_df = CSV.read(\n    smoted_training_features_df_filename,\n    DataFrames.DataFrame,\n    )\nsmoted_training_labels_df = CSV.read(\n    smoted_training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :V1,\n    :V2,\n    :V3,\n    :V4,\n    :V5,\n    :V6,\n    :V7,\n    :V8,\n    :V9,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :Class\nnegativeclass = \nbenign\n\npositiveclass = \nmalignant\n\nsinglelabellevels = [negativeclass, positiveclass]\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    featurenames,\n    )\n\nrandom_forest_classifier = PredictMD.singlelabelmulticlassdataframerandomforestclassifier(\n    featurenames,\n    singlelabelname,\n    singlelabellevels;\n    nsubfeatures = 4,\n    ntrees = 200,\n    package = :DecisionTreejl,\n    name = \nRandom forest\n,\n    feature_contrasts = feature_contrasts,\n    )\n\nPredictMD.fit!(\n    random_forest_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    )\n\nrandom_forest_classifier_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    random_forest_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(random_forest_classifier_hist_training)\n\nrandom_forest_classifier_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    random_forest_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(random_forest_classifier_hist_testing)\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    random_forest_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    random_forest_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nrandom_forest_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nrandom_forest_classifier.jld2\n,\n    )\n\nPredictMD.save_model(random_forest_classifier_filename, random_forest_classifier)\n\n\n\n\nINFO: INFO Starting to train DecisionTree.jl model.\nINFO: INFO Finished training DecisionTree.jl model.\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaWgNzsx.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaoAIBpn.svg\nINFO: INFO Attempting to save model...\nINFO: INFO Saved model to file \n/tmp/breast_cancer_biopsy_example/random_forest_classifier.jld2\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "4. Random forest classifier"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/05_c_svc_svm_classifier/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport LIBSVM\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nbreast_cancer_biopsy_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_features_df.csv\n,\n    )\nsmoted_training_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_labels_df.csv\n,\n    )\nsmoted_training_features_df = CSV.read(\n    smoted_training_features_df_filename,\n    DataFrames.DataFrame,\n    )\nsmoted_training_labels_df = CSV.read(\n    smoted_training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :V1,\n    :V2,\n    :V3,\n    :V4,\n    :V5,\n    :V6,\n    :V7,\n    :V8,\n    :V9,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :Class\nnegativeclass = \nbenign\n\npositiveclass = \nmalignant\n\nsinglelabellevels = [negativeclass, positiveclass]\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    featurenames,\n    )\n\nc_svc_svm_classifier = PredictMD.singlelabelmulticlassdataframesvmclassifier(\n    featurenames,\n    singlelabelname,\n    singlelabellevels;\n    package = :LIBSVMjl,\n    svmtype = LIBSVM.SVC,\n    name = \nSVM (C-SVC)\n,\n    verbose = false,\n    feature_contrasts = feature_contrasts,\n    )\n\nPredictMD.fit!(\n    c_svc_svm_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    )\n\nc_svc_svm_classifier_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    c_svc_svm_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(c_svc_svm_classifier_hist_training)\n\nc_svc_svm_classifier_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    c_svc_svm_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(c_svc_svm_classifier_hist_testing)\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    c_svc_svm_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    c_svc_svm_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nc_svc_svm_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nc_svc_svm_classifier.jld2\n,\n    )\n\nPredictMD.save_model(c_svc_svm_classifier_filename, c_svc_svm_classifier)\n\n\n\n\nINFO: INFO Starting to train LIBSVM.jl model.\nINFO: INFO Finished training LIBSVM.jl model.\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliasANKcU.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaNv37Vd.svg\nINFO: INFO Attempting to save model...\nINFO: INFO Saved model to file \n/tmp/breast_cancer_biopsy_example/c_svc_svm_classifier.jld2\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "5. C-SVC support vector machine classifier"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/06_nu_svc_svm_classifier/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport LIBSVM\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nbreast_cancer_biopsy_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_features_df.csv\n,\n    )\nsmoted_training_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_labels_df.csv\n,\n    )\nsmoted_training_features_df = CSV.read(\n    smoted_training_features_df_filename,\n    DataFrames.DataFrame,\n    )\nsmoted_training_labels_df = CSV.read(\n    smoted_training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :V1,\n    :V2,\n    :V3,\n    :V4,\n    :V5,\n    :V6,\n    :V7,\n    :V8,\n    :V9,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :Class\nnegativeclass = \nbenign\n\npositiveclass = \nmalignant\n\nsinglelabellevels = [negativeclass, positiveclass]\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    featurenames,\n    )\n\nnu_svc_svm_classifier = PredictMD.singlelabelmulticlassdataframesvmclassifier(\n    featurenames,\n    singlelabelname,\n    singlelabellevels;\n    package = :LIBSVMjl,\n    svmtype = LIBSVM.NuSVC,\n    name = \nSVM (nu-SVC)\n,\n    verbose = false,\n    feature_contrasts = feature_contrasts,\n    )\n\nPredictMD.fit!(\n    nu_svc_svm_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    )\n\nnu_svc_svm_classifier_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    nu_svc_svm_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(nu_svc_svm_classifier_hist_training)\n\nnu_svc_svm_classifier_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    nu_svc_svm_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(nu_svc_svm_classifier_hist_testing)\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    nu_svc_svm_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    nu_svc_svm_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nnu_svc_svm_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nnu_svc_svm_classifier.jld2\n,\n    )\n\nPredictMD.save_model(nu_svc_svm_classifier_filename, nu_svc_svm_classifier)\n\n\n\n\nINFO: INFO Starting to train LIBSVM.jl model.\nINFO: INFO Finished training LIBSVM.jl model.\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaPlnBqw.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaa2boZy.svg\nINFO: INFO Attempting to save model...\nINFO: INFO Saved model to file \n/tmp/breast_cancer_biopsy_example/nu_svc_svm_classifier.jld2\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "6. nu-SVC support vector machine classifier"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/07_knet_mlp_classifier/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport Knet\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nbreast_cancer_biopsy_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_features_df.csv\n,\n    )\nsmoted_training_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_labels_df.csv\n,\n    )\nsmoted_training_features_df = CSV.read(\n    smoted_training_features_df_filename,\n    DataFrames.DataFrame,\n    )\nsmoted_training_labels_df = CSV.read(\n    smoted_training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\ncategoricalfeaturenames = Symbol[]\ncontinuousfeaturenames = Symbol[\n    :V1,\n    :V2,\n    :V3,\n    :V4,\n    :V5,\n    :V6,\n    :V7,\n    :V8,\n    :V9,\n    ]\nfeaturenames = vcat(categoricalfeaturenames, continuousfeaturenames)\n\nsinglelabelname = :Class\nnegativeclass = \nbenign\n\npositiveclass = \nmalignant\n\nsinglelabellevels = [negativeclass, positiveclass]\n\nknet_mlp_predict_function_source = \n\nfunction knetmlp_predict(\n        w,\n        x0::AbstractArray;\n        probabilities::Bool = true,\n        )\n    x1 = Knet.relu.( w[1]*x0 .+ w[2] )\n    x2 = Knet.relu.( w[3]*x1 .+ w[4] )\n    x3 = w[5]*x2 .+ w[6]\n    unnormalizedlogprobs = x3\n    if probabilities\n        normalizedlogprobs = Knet.logp(unnormalizedlogprobs, 1)\n        normalizedprobs = exp.(normalizedlogprobs)\n        return normalizedprobs\n    else\n        return unnormalizedlogprobs\n    end\nend\n\n\n\nknet_mlp_loss_function_source = \n\nfunction knetmlp_loss(\n        predict::Function,\n        modelweights,\n        x::AbstractArray,\n        ytrue::AbstractArray;\n        L1::Real = Cfloat(0),\n        L2::Real = Cfloat(0),\n        )\n    loss = Knet.nll(\n        predict(\n            modelweights,\n            x;\n            probabilities = false,\n            ),\n        ytrue,\n        1,\n        )\n    if L1 != 0\n        loss += L1 * sum(sum(abs, w_i) for w_i in modelweights[1:2:end])\n    end\n    if L2 != 0\n        loss += L2 * sum(sum(abs2, w_i) for w_i in modelweights[1:2:end])\n    end\n    return loss\nend\n\n\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    featurenames,\n    )\n\nknetmlp_modelweights = Any[\n    Cfloat.(\n        0.1f0*randn(Cfloat,64,feature_contrasts.num_array_columns)\n        ),\n    Cfloat.(\n        zeros(Cfloat,64,1)\n        ),\n    Cfloat.(\n        0.1f0*randn(Cfloat,32,64)\n        ),\n    Cfloat.(\n        zeros(Cfloat,32,1)\n        ),\n    Cfloat.(\n        0.1f0*randn(Cfloat,2,32)\n        ),\n    Cfloat.(\n        zeros(Cfloat,2,1)\n        ),\n    ]\n\nknetmlp_losshyperparameters = Dict()\nknetmlp_losshyperparameters[:L1] = Cfloat(0.0)\nknetmlp_losshyperparameters[:L2] = Cfloat(0.0)\n\nknetmlp_optimizationalgorithm = :Momentum\nknetmlp_optimizerhyperparameters = Dict()\nknetmlp_minibatchsize = 48\nknetmlp_maxepochs = 1_000\n\nknet_mlp_classifier = PredictMD.singlelabelmulticlassdataframeknetclassifier(\n    featurenames,\n    singlelabelname,\n    singlelabellevels;\n    package = :Knetjl,\n    name = \nKnet MLP\n,\n    predict_function_source = knet_mlp_predict_function_source,\n    loss_function_source = knet_mlp_loss_function_source,\n    losshyperparameters = knetmlp_losshyperparameters,\n    optimizationalgorithm = knetmlp_optimizationalgorithm,\n    optimizerhyperparameters = knetmlp_optimizerhyperparameters,\n    minibatchsize = knetmlp_minibatchsize,\n    modelweights = knetmlp_modelweights,\n    printlosseverynepochs = 100,\n    maxepochs = knetmlp_maxepochs,\n    feature_contrasts = feature_contrasts,\n    )\n\nPredictMD.parse_functions!(knet_mlp_classifier)\n\nPredictMD.fit!(\n    knet_mlp_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    validation_features_df,\n    validation_labels_df,\n    )\n\nknet_learningcurve_lossvsepoch = PredictMD.plotlearningcurve(\n    knet_mlp_classifier,\n    :loss_vs_epoch;\n    )\nPredictMD.open_plot(knet_learningcurve_lossvsepoch)\n\nknet_learningcurve_lossvsepoch_skip10epochs = PredictMD.plotlearningcurve(\n    knet_mlp_classifier,\n    :loss_vs_epoch;\n    startat = 10,\n    endat = :end,\n    )\nPredictMD.open_plot(knet_learningcurve_lossvsepoch_skip10epochs)\n\nknet_learningcurve_lossvsiteration = PredictMD.plotlearningcurve(\n    knet_mlp_classifier,\n    :loss_vs_iteration;\n    window = 50,\n    sampleevery = 10,\n    )\nPredictMD.open_plot(knet_learningcurve_lossvsiteration)\n\nknet_learningcurve_lossvsiteration_skip100iterations = PredictMD.plotlearningcurve(\n    knet_mlp_classifier,\n    :loss_vs_iteration;\n    window = 50,\n    sampleevery = 10,\n    startat = 100,\n    endat = :end,\n    )\nPredictMD.open_plot(knet_learningcurve_lossvsiteration_skip100iterations)\n\nknet_mlp_classifier_hist_training = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    knet_mlp_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(knet_mlp_classifier_hist_training)\n\nknet_mlp_classifier_hist_testing = PredictMD.plotsinglelabelbinaryclassifierhistogram(\n    knet_mlp_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    singlelabellevels,\n    )\nPredictMD.open_plot(knet_mlp_classifier_hist_testing)\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    knet_mlp_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nPredictMD.singlelabelbinaryclassificationmetrics(\n    knet_mlp_classifier,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    )\n\nknet_mlp_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nknet_mlp_classifier.jld2\n,\n    )\n\nPredictMD.save_model(knet_mlp_classifier_filename, knet_mlp_classifier)\n\n\n\n\nWARNING: Method definition knetmlp_predict(Any, AbstractArray{T, N} where N where T) in module PredictMD at none:6 overwritten at none:6.\nWARNING: Method definition #knetmlp_predict(Array{Any, 1}, typeof(PredictMD.knetmlp_predict), Any, AbstractArray{T, N} where N where T) in module PredictMD overwritten.\nWARNING: Method definition knetmlp_loss(Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD at none:9 overwritten at none:9.\nWARNING: Method definition #knetmlp_loss(Array{Any, 1}, typeof(PredictMD.knetmlp_loss), Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD overwritten.\nINFO: INFO Starting to train Knet.jl model. Max epochs: 1000.\nINFO: INFO Epoch: 0. Loss (training set): 0.7201029. Loss (validation set): 0.6927045935199466.\nINFO: INFO Epoch: 100. Loss (training set): 0.09744535. Loss (validation set): 0.10499530119466373.\nINFO: INFO Epoch: 200. Loss (training set): 0.0597624. Loss (validation set): 0.07322174962375574.\nINFO: INFO Epoch: 300. Loss (training set): 0.045931447. Loss (validation set): 0.06903423504480356.\nINFO: INFO Epoch: 400. Loss (training set): 0.038275506. Loss (validation set): 0.06803475318710037.\nINFO: INFO Epoch: 500. Loss (training set): 0.033291608. Loss (validation set): 0.06852033895709449.\nINFO: INFO Epoch: 600. Loss (training set): 0.029123198. Loss (validation set): 0.06943674983424104.\nINFO: INFO Epoch: 700. Loss (training set): 0.025713954. Loss (validation set): 0.0695901351953489.\nINFO: INFO Epoch: 800. Loss (training set): 0.022704413. Loss (validation set): 0.07064241984158841.\nINFO: INFO Epoch: 900. Loss (training set): 0.019910447. Loss (validation set): 0.0730483377405911.\nINFO: INFO Epoch: 1000. Loss (training set): 0.017296534. Loss (validation set): 0.07547972273625916.\nINFO: INFO Finished training Knet.jl model.\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaIMkvHT.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliapiAc3N.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaZJyKvO.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaqJmsRU.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliacBBkW6.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaDnmhwl.svg\nINFO: INFO Attempting to save model...\nINFO: INFO Saved model to file \n/tmp/breast_cancer_biopsy_example/knet_mlp_classifier.jld2\n\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "7. Knet neural network classifier"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/08_compare_models/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport Knet\nimport PredictMD\n\nmkpath(\n    joinpath(\n        tempdir(),\n        \nbreast_cancer_biopsy_example\n,\n        ),\n    )\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_features_df.csv\n,\n    )\nsmoted_training_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_labels_df.csv\n,\n    )\nsmoted_training_features_df = CSV.read(\n    smoted_training_features_df_filename,\n    DataFrames.DataFrame,\n    )\nsmoted_training_labels_df = CSV.read(\n    smoted_training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nlogistic_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nlogistic_classifier.jld2\n,\n    )\nrandom_forest_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nrandom_forest_classifier.jld2\n,\n    )\nc_svc_svm_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nc_svc_svm_classifier.jld2\n,\n    )\nnu_svc_svm_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nnu_svc_svm_classifier.jld2\n,\n    )\nknet_mlp_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nknet_mlp_classifier.jld2\n,\n    )\n\nlogistic_classifier = PredictMD.load_model(logistic_classifier_filename)\nrandom_forest_classifier = PredictMD.load_model(random_forest_classifier_filename)\nc_svc_svm_classifier = PredictMD.load_model(c_svc_svm_classifier_filename)\nnu_svc_svm_classifier = PredictMD.load_model(nu_svc_svm_classifier_filename)\nknet_mlp_classifier = PredictMD.load_model(knet_mlp_classifier_filename)\nPredictMD.parse_functions!(knet_mlp_classifier)\n\nall_models = PredictMD.Fittable[\n    logistic_classifier,\n    random_forest_classifier,\n    c_svc_svm_classifier,\n    nu_svc_svm_classifier,\n    knet_mlp_classifier,\n    ]\n\nsinglelabelname = :Class\nnegativeclass = \nbenign\n\npositiveclass = \nmalignant\n\n\nshowall(PredictMD.singlelabelbinaryclassificationmetrics(\n    all_models,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    ))\nshowall(PredictMD.singlelabelbinaryclassificationmetrics(\n    all_models,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    positiveclass;\n    specificity = 0.95,\n    ))\nshowall(PredictMD.singlelabelbinaryclassificationmetrics(\n    all_models,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    positiveclass;\n    maximize = :f1score,\n    ))\nshowall(PredictMD.singlelabelbinaryclassificationmetrics(\n    all_models,\n    training_features_df,\n    training_labels_df,\n    singlelabelname,\n    positiveclass;\n    maximize = :cohen_kappa,\n    ))\n\nshowall(PredictMD.singlelabelbinaryclassificationmetrics(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    sensitivity = 0.95,\n    ))\nshowall(PredictMD.singlelabelbinaryclassificationmetrics(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    specificity = 0.95,\n    ))\nshowall(PredictMD.singlelabelbinaryclassificationmetrics(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    maximize = :f1score,\n    ))\nshowall(PredictMD.singlelabelbinaryclassificationmetrics(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass;\n    maximize = :cohen_kappa,\n    ))\n\nrocplottesting = PredictMD.plotroccurves(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass,\n    )\nPredictMD.open_plot(rocplottesting)\n\nprplottesting = PredictMD.plotprcurves(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    singlelabelname,\n    positiveclass,\n    )\nPredictMD.open_plot(prplottesting)\n\n\n\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/logistic_classifier.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/random_forest_classifier.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/c_svc_svm_classifier.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/nu_svc_svm_classifier.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/knet_mlp_classifier.jld2\n\nWARNING: Method definition knetmlp_predict(Any, AbstractArray{T, N} where N where T) in module PredictMD at none:5 overwritten at none:6.\nWARNING: Method definition #knetmlp_predict(Array{Any, 1}, typeof(PredictMD.knetmlp_predict), Any, AbstractArray{T, N} where N where T) in module PredictMD overwritten.\nWARNING: Method definition knetmlp_loss(Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD at none:9 overwritten at none:9.\nWARNING: Method definition #knetmlp_loss(Array{Any, 1}, typeof(PredictMD.knetmlp_loss), Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD overwritten.\n12\u00d76 DataFrames.DataFrame\n\u2502 Row \u2502 metric                                           \u2502 Logistic regression \u2502 Random forest \u2502 SVM (C-SVC) \u2502 SVM (nu-SVC) \u2502 Knet MLP \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 AUPRC                                            \u2502 0.990361            \u2502 0.999755      \u2502 1.0         \u2502 0.998118     \u2502 0.999365 \u2502\n\u2502 2   \u2502 AUROCC                                           \u2502 0.995607            \u2502 0.999852      \u2502 1.0         \u2502 0.998819     \u2502 0.999631 \u2502\n\u2502 3   \u2502 Average precision                                \u2502 0.990415            \u2502 0.999756      \u2502 1.0         \u2502 0.998125     \u2502 0.999368 \u2502\n\u2502 4   \u2502 * Threshold                                      \u2502 0.672809            \u2502 0.85          \u2502 0.980988    \u2502 0.94822      \u2502 0.933149 \u2502\n\u2502 5   \u2502 * Accuracy                                       \u2502 0.967742            \u2502 0.982405      \u2502 0.982405    \u2502 0.982405     \u2502 0.979472 \u2502\n\u2502 6   \u2502 * Cohen's Kappa statistic                        \u2502 0.912352            \u2502 0.951249      \u2502 0.951249    \u2502 0.951249     \u2502 0.943343 \u2502\n\u2502 7   \u2502 * F1 Score                                       \u2502 0.956175            \u2502 0.97561       \u2502 0.97561     \u2502 0.97561      \u2502 0.97166  \u2502\n\u2502 8   \u2502 * Precision (positive predictive value)          \u2502 0.96                \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.991736 \u2502\n\u2502 9   \u2502 * Negative predictive value                      \u2502 0.972222            \u2502 0.972851      \u2502 0.972851    \u2502 0.972851     \u2502 0.972727 \u2502\n\u2502 10  \u2502 * Recall (sensitivity, true positive rate)       \u2502 0.952381            \u2502 0.952381      \u2502 0.952381    \u2502 0.952381     \u2502 0.952381 \u2502\n\u2502 11  \u2502 [fix] * Sensitivity (recall, true positive rate) \u2502 0.952381            \u2502 0.952381      \u2502 0.952381    \u2502 0.952381     \u2502 0.952381 \u2502\n\u2502 12  \u2502 * Specificity (true negative rate)               \u2502 0.976744            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.995349 \u250212\u00d76 DataFrames.DataFrame\n\u2502 Row \u2502 metric                                     \u2502 Logistic regression \u2502 Random forest \u2502 SVM (C-SVC) \u2502 SVM (nu-SVC) \u2502 Knet MLP  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 AUPRC                                      \u2502 0.990361            \u2502 0.999755      \u2502 1.0         \u2502 0.998118     \u2502 0.999365  \u2502\n\u2502 2   \u2502 AUROCC                                     \u2502 0.995607            \u2502 0.999852      \u2502 1.0         \u2502 0.998819     \u2502 0.999631  \u2502\n\u2502 3   \u2502 Average precision                          \u2502 0.990415            \u2502 0.999756      \u2502 1.0         \u2502 0.998125     \u2502 0.999368  \u2502\n\u2502 4   \u2502 * Threshold                                \u2502 0.254932            \u2502 0.11          \u2502 0.052293    \u2502 0.700985     \u2502 0.0437535 \u2502\n\u2502 5   \u2502 * Accuracy                                 \u2502 0.970674            \u2502 0.967742      \u2502 0.967742    \u2502 0.964809     \u2502 0.967742  \u2502\n\u2502 6   \u2502 * Cohen's Kappa statistic                  \u2502 0.923775            \u2502 0.916496      \u2502 0.916496    \u2502 0.90853      \u2502 0.916496  \u2502\n\u2502 7   \u2502 * F1 Score                                 \u2502 0.961832            \u2502 0.958175      \u2502 0.958175    \u2502 0.954198     \u2502 0.958175  \u2502\n\u2502 8   \u2502 * Precision (positive predictive value)    \u2502 0.926471            \u2502 0.919708      \u2502 0.919708    \u2502 0.919118     \u2502 0.919708  \u2502\n\u2502 9   \u2502 * Negative predictive value                \u2502 1.0                 \u2502 1.0           \u2502 1.0         \u2502 0.995122     \u2502 1.0       \u2502\n\u2502 10  \u2502 * Recall (sensitivity, true positive rate) \u2502 1.0                 \u2502 1.0           \u2502 1.0         \u2502 0.992063     \u2502 1.0       \u2502\n\u2502 11  \u2502 * Sensitivity (recall, true positive rate) \u2502 1.0                 \u2502 1.0           \u2502 1.0         \u2502 0.992063     \u2502 1.0       \u2502\n\u2502 12  \u2502 [fix] * Specificity (true negative rate)   \u2502 0.953488            \u2502 0.948837      \u2502 0.948837    \u2502 0.948837     \u2502 0.948837  \u250212\u00d76 DataFrames.DataFrame\n\u2502 Row \u2502 metric                                     \u2502 Logistic regression \u2502 Random forest \u2502 SVM (C-SVC) \u2502 SVM (nu-SVC) \u2502 Knet MLP \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 AUPRC                                      \u2502 0.990361            \u2502 0.999755      \u2502 1.0         \u2502 0.998118     \u2502 0.999365 \u2502\n\u2502 2   \u2502 AUROCC                                     \u2502 0.995607            \u2502 0.999852      \u2502 1.0         \u2502 0.998819     \u2502 0.999631 \u2502\n\u2502 3   \u2502 Average precision                          \u2502 0.990415            \u2502 0.999756      \u2502 1.0         \u2502 0.998125     \u2502 0.999368 \u2502\n\u2502 4   \u2502 * Threshold                                \u2502 0.40199             \u2502 0.71          \u2502 0.969405    \u2502 0.947849     \u2502 0.437825 \u2502\n\u2502 5   \u2502 * Accuracy                                 \u2502 0.97654             \u2502 0.997067      \u2502 1.0         \u2502 0.98827      \u2502 0.991202 \u2502\n\u2502 6   \u2502 * Cohen's Kappa statistic                  \u2502 0.938018            \u2502 0.992032      \u2502 1.0         \u2502 0.96775      \u2502 0.976474 \u2502\n\u2502 7   \u2502 [max] * F1 score                           \u2502 0.968992            \u2502 0.996016      \u2502 1.0         \u2502 0.983871     \u2502 0.988235 \u2502\n\u2502 8   \u2502 * Precision (positive predictive value)    \u2502 0.94697             \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.976744 \u2502\n\u2502 9   \u2502 * Negative predictive value                \u2502 0.995215            \u2502 0.99537       \u2502 1.0         \u2502 0.981735     \u2502 1.0      \u2502\n\u2502 10  \u2502 * Recall (sensitivity, true positive rate) \u2502 0.992063            \u2502 0.992063      \u2502 1.0         \u2502 0.968254     \u2502 1.0      \u2502\n\u2502 11  \u2502 * Sensitivity (recall, true positive rate) \u2502 0.992063            \u2502 0.992063      \u2502 1.0         \u2502 0.968254     \u2502 1.0      \u2502\n\u2502 12  \u2502 * Specificity (true negative rate)         \u2502 0.967442            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.986047 \u250212\u00d76 DataFrames.DataFrame\n\u2502 Row \u2502 metric                                     \u2502 Logistic regression \u2502 Random forest \u2502 SVM (C-SVC) \u2502 SVM (nu-SVC) \u2502 Knet MLP \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 AUPRC                                      \u2502 0.990361            \u2502 0.999755      \u2502 1.0         \u2502 0.998118     \u2502 0.999365 \u2502\n\u2502 2   \u2502 AUROCC                                     \u2502 0.995607            \u2502 0.999852      \u2502 1.0         \u2502 0.998819     \u2502 0.999631 \u2502\n\u2502 3   \u2502 Average precision                          \u2502 0.990415            \u2502 0.999756      \u2502 1.0         \u2502 0.998125     \u2502 0.999368 \u2502\n\u2502 4   \u2502 * Threshold                                \u2502 0.40199             \u2502 0.71          \u2502 0.969405    \u2502 0.947849     \u2502 0.437825 \u2502\n\u2502 5   \u2502 * Accuracy                                 \u2502 0.97654             \u2502 0.997067      \u2502 1.0         \u2502 0.98827      \u2502 0.991202 \u2502\n\u2502 6   \u2502 [max] * Cohen's Kappa statistic            \u2502 0.938018            \u2502 0.992032      \u2502 1.0         \u2502 0.96775      \u2502 0.976474 \u2502\n\u2502 7   \u2502 * F1 Score                                 \u2502 0.968992            \u2502 0.996016      \u2502 1.0         \u2502 0.983871     \u2502 0.988235 \u2502\n\u2502 8   \u2502 * Precision (positive predictive value)    \u2502 0.94697             \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.976744 \u2502\n\u2502 9   \u2502 * Negative predictive value                \u2502 0.995215            \u2502 0.99537       \u2502 1.0         \u2502 0.981735     \u2502 1.0      \u2502\n\u2502 10  \u2502 * Recall (sensitivity, true positive rate) \u2502 0.992063            \u2502 0.992063      \u2502 1.0         \u2502 0.968254     \u2502 1.0      \u2502\n\u2502 11  \u2502 * Sensitivity (recall, true positive rate) \u2502 0.992063            \u2502 0.992063      \u2502 1.0         \u2502 0.968254     \u2502 1.0      \u2502\n\u2502 12  \u2502 * Specificity (true negative rate)         \u2502 0.967442            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.986047 \u250212\u00d76 DataFrames.DataFrame\n\u2502 Row \u2502 metric                                           \u2502 Logistic regression \u2502 Random forest \u2502 SVM (C-SVC) \u2502 SVM (nu-SVC) \u2502 Knet MLP \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 AUPRC                                            \u2502 0.980282            \u2502 0.976477      \u2502 0.933478    \u2502 0.93149      \u2502 0.982656 \u2502\n\u2502 2   \u2502 AUROCC                                           \u2502 0.990163            \u2502 0.989028      \u2502 0.979419    \u2502 0.976392     \u2502 0.991525 \u2502\n\u2502 3   \u2502 Average precision                                \u2502 0.980464            \u2502 0.976615      \u2502 0.934642    \u2502 0.932519     \u2502 0.982819 \u2502\n\u2502 4   \u2502 * Threshold                                      \u2502 0.313116            \u2502 0.645         \u2502 0.939073    \u2502 0.928091     \u2502 0.641414 \u2502\n\u2502 5   \u2502 * Accuracy                                       \u2502 0.94152             \u2502 0.959064      \u2502 0.959064    \u2502 0.959064     \u2502 0.959064 \u2502\n\u2502 6   \u2502 * Cohen's Kappa statistic                        \u2502 0.836242            \u2502 0.882361      \u2502 0.882361    \u2502 0.882361     \u2502 0.882361 \u2502\n\u2502 7   \u2502 * F1 Score                                       \u2502 0.918033            \u2502 0.941176      \u2502 0.941176    \u2502 0.941176     \u2502 0.941176 \u2502\n\u2502 8   \u2502 * Precision (positive predictive value)          \u2502 0.888889            \u2502 0.933333      \u2502 0.933333    \u2502 0.933333     \u2502 0.933333 \u2502\n\u2502 9   \u2502 * Negative predictive value                      \u2502 0.972222            \u2502 0.972973      \u2502 0.972973    \u2502 0.972973     \u2502 0.972973 \u2502\n\u2502 10  \u2502 * Recall (sensitivity, true positive rate)       \u2502 0.949153            \u2502 0.949153      \u2502 0.949153    \u2502 0.949153     \u2502 0.949153 \u2502\n\u2502 11  \u2502 [fix] * Sensitivity (recall, true positive rate) \u2502 0.949153            \u2502 0.949153      \u2502 0.949153    \u2502 0.949153     \u2502 0.949153 \u2502\n\u2502 12  \u2502 * Specificity (true negative rate)               \u2502 0.9375              \u2502 0.964286      \u2502 0.964286    \u2502 0.964286     \u2502 0.964286 \u250212\u00d76 DataFrames.DataFrame\n\u2502 Row \u2502 metric                                     \u2502 Logistic regression \u2502 Random forest \u2502 SVM (C-SVC) \u2502 SVM (nu-SVC) \u2502 Knet MLP  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 AUPRC                                      \u2502 0.980282            \u2502 0.976477      \u2502 0.933478    \u2502 0.93149      \u2502 0.982656  \u2502\n\u2502 2   \u2502 AUROCC                                     \u2502 0.990163            \u2502 0.989028      \u2502 0.979419    \u2502 0.976392     \u2502 0.991525  \u2502\n\u2502 3   \u2502 Average precision                          \u2502 0.980464            \u2502 0.976615      \u2502 0.934642    \u2502 0.932519     \u2502 0.982819  \u2502\n\u2502 4   \u2502 * Threshold                                \u2502 0.435877            \u2502 0.355         \u2502 0.588227    \u2502 0.579346     \u2502 0.0935259 \u2502\n\u2502 5   \u2502 * Accuracy                                 \u2502 0.94152             \u2502 0.964912      \u2502 0.964912    \u2502 0.964912     \u2502 0.959064  \u2502\n\u2502 6   \u2502 * Cohen's Kappa statistic                  \u2502 0.83338             \u2502 0.903452      \u2502 0.903452    \u2502 0.903452     \u2502 0.886367  \u2502\n\u2502 7   \u2502 * F1 Score                                 \u2502 0.916667            \u2502 0.951613      \u2502 0.951613    \u2502 0.951613     \u2502 0.943089  \u2502\n\u2502 8   \u2502 * Precision (positive predictive value)    \u2502 0.901639            \u2502 0.907692      \u2502 0.907692    \u2502 0.907692     \u2502 0.90625   \u2502\n\u2502 9   \u2502 * Negative predictive value                \u2502 0.963636            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.990654  \u2502\n\u2502 10  \u2502 * Recall (sensitivity, true positive rate) \u2502 0.932203            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.983051  \u2502\n\u2502 11  \u2502 * Sensitivity (recall, true positive rate) \u2502 0.932203            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.983051  \u2502\n\u2502 12  \u2502 [fix] * Specificity (true negative rate)   \u2502 0.946429            \u2502 0.946429      \u2502 0.946429    \u2502 0.946429     \u2502 0.946429  \u250212\u00d76 DataFrames.DataFrame\n\u2502 Row \u2502 metric                                     \u2502 Logistic regression \u2502 Random forest \u2502 SVM (C-SVC) \u2502 SVM (nu-SVC) \u2502 Knet MLP \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 AUPRC                                      \u2502 0.980282            \u2502 0.976477      \u2502 0.933478    \u2502 0.93149      \u2502 0.982656 \u2502\n\u2502 2   \u2502 AUROCC                                     \u2502 0.990163            \u2502 0.989028      \u2502 0.979419    \u2502 0.976392     \u2502 0.991525 \u2502\n\u2502 3   \u2502 Average precision                          \u2502 0.980464            \u2502 0.976615      \u2502 0.934642    \u2502 0.932519     \u2502 0.982819 \u2502\n\u2502 4   \u2502 * Threshold                                \u2502 0.738787            \u2502 0.43          \u2502 0.712545    \u2502 0.893868     \u2502 0.443556 \u2502\n\u2502 5   \u2502 * Accuracy                                 \u2502 0.959064            \u2502 0.976608      \u2502 0.97076     \u2502 0.976608     \u2502 0.97076  \u2502\n\u2502 6   \u2502 * Cohen's Kappa statistic                  \u2502 0.880351            \u2502 0.934497      \u2502 0.918833    \u2502 0.934497     \u2502 0.917406 \u2502\n\u2502 7   \u2502 [max] * F1 score                           \u2502 0.940171            \u2502 0.967213      \u2502 0.95935     \u2502 0.967213     \u2502 0.958678 \u2502\n\u2502 8   \u2502 * Precision (positive predictive value)    \u2502 0.948276            \u2502 0.936508      \u2502 0.921875    \u2502 0.936508     \u2502 0.935484 \u2502\n\u2502 9   \u2502 * Negative predictive value                \u2502 0.964602            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.990826 \u2502\n\u2502 10  \u2502 * Recall (sensitivity, true positive rate) \u2502 0.932203            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.983051 \u2502\n\u2502 11  \u2502 * Sensitivity (recall, true positive rate) \u2502 0.932203            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.983051 \u2502\n\u2502 12  \u2502 * Specificity (true negative rate)         \u2502 0.973214            \u2502 0.964286      \u2502 0.955357    \u2502 0.964286     \u2502 0.964286 \u250212\u00d76 DataFrames.DataFrame\n\u2502 Row \u2502 metric                                     \u2502 Logistic regression \u2502 Random forest \u2502 SVM (C-SVC) \u2502 SVM (nu-SVC) \u2502 Knet MLP \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 AUPRC                                      \u2502 0.980282            \u2502 0.976477      \u2502 0.933478    \u2502 0.93149      \u2502 0.982656 \u2502\n\u2502 2   \u2502 AUROCC                                     \u2502 0.990163            \u2502 0.989028      \u2502 0.979419    \u2502 0.976392     \u2502 0.991525 \u2502\n\u2502 3   \u2502 Average precision                          \u2502 0.980464            \u2502 0.976615      \u2502 0.934642    \u2502 0.932519     \u2502 0.982819 \u2502\n\u2502 4   \u2502 * Threshold                                \u2502 0.738787            \u2502 0.43          \u2502 0.712545    \u2502 0.893868     \u2502 0.443556 \u2502\n\u2502 5   \u2502 * Accuracy                                 \u2502 0.959064            \u2502 0.976608      \u2502 0.97076     \u2502 0.976608     \u2502 0.97076  \u2502\n\u2502 6   \u2502 [max] * Cohen's Kappa statistic            \u2502 0.880351            \u2502 0.934497      \u2502 0.918833    \u2502 0.934497     \u2502 0.917406 \u2502\n\u2502 7   \u2502 * F1 Score                                 \u2502 0.940171            \u2502 0.967213      \u2502 0.95935     \u2502 0.967213     \u2502 0.958678 \u2502\n\u2502 8   \u2502 * Precision (positive predictive value)    \u2502 0.948276            \u2502 0.936508      \u2502 0.921875    \u2502 0.936508     \u2502 0.935484 \u2502\n\u2502 9   \u2502 * Negative predictive value                \u2502 0.964602            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.990826 \u2502\n\u2502 10  \u2502 * Recall (sensitivity, true positive rate) \u2502 0.932203            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.983051 \u2502\n\u2502 11  \u2502 * Sensitivity (recall, true positive rate) \u2502 0.932203            \u2502 1.0           \u2502 1.0         \u2502 1.0          \u2502 0.983051 \u2502\n\u2502 12  \u2502 * Specificity (true negative rate)         \u2502 0.973214            \u2502 0.964286      \u2502 0.955357    \u2502 0.964286     \u2502 0.964286 \u2502INFO: DEBUG Skipping opening file during Travis build: /tmp/juliaIzSZN6.svg\nINFO: DEBUG Skipping opening file during Travis build: /tmp/juliaxpvfqQ.svg\n\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "8. Compare models"
        }, 
        {
            "location": "/examples/cpu/breast_cancer_biopsy/09_get_model_output/", 
            "text": "srand(999)\n\nimport CSV\nimport DataFrames\nimport Knet\nimport PredictMD\n\ntrainingandvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_features_df.csv\n,\n    )\ntrainingandvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntrainingandvalidation_labels_df.csv\n,\n    )\ntesting_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_features_df.csv\n,\n    )\ntesting_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntesting_labels_df.csv\n,\n    )\ntraining_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_features_df.csv\n,\n    )\ntraining_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \ntraining_labels_df.csv\n,\n    )\nvalidation_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_features_df.csv\n,\n    )\nvalidation_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nvalidation_labels_df.csv\n,\n    )\ntrainingandvalidation_features_df = CSV.read(\n    trainingandvalidation_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntrainingandvalidation_labels_df = CSV.read(\n    trainingandvalidation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_features_df = CSV.read(\n    testing_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntesting_labels_df = CSV.read(\n    testing_labels_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_features_df = CSV.read(\n    training_features_df_filename,\n    DataFrames.DataFrame,\n    )\ntraining_labels_df = CSV.read(\n    training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_features_df = CSV.read(\n    validation_features_df_filename,\n    DataFrames.DataFrame,\n    )\nvalidation_labels_df = CSV.read(\n    validation_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_features_df.csv\n,\n    )\nsmoted_training_labels_df_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nsmoted_training_labels_df.csv\n,\n    )\nsmoted_training_features_df = CSV.read(\n    smoted_training_features_df_filename,\n    DataFrames.DataFrame,\n    )\nsmoted_training_labels_df = CSV.read(\n    smoted_training_labels_df_filename,\n    DataFrames.DataFrame,\n    )\n\nlogistic_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nlogistic_classifier.jld2\n,\n    )\nrandom_forest_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nrandom_forest_classifier.jld2\n,\n    )\nc_svc_svm_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nc_svc_svm_classifier.jld2\n,\n    )\nnu_svc_svm_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nnu_svc_svm_classifier.jld2\n,\n    )\nknet_mlp_classifier_filename = joinpath(\n    tempdir(),\n    \nbreast_cancer_biopsy_example\n,\n    \nknet_mlp_classifier.jld2\n,\n    )\n\nlogistic_classifier = PredictMD.load_model(logistic_classifier_filename)\nrandom_forest_classifier = PredictMD.load_model(random_forest_classifier_filename)\nc_svc_svm_classifier = PredictMD.load_model(c_svc_svm_classifier_filename)\nnu_svc_svm_classifier = PredictMD.load_model(nu_svc_svm_classifier_filename)\nknet_mlp_classifier = PredictMD.load_model(knet_mlp_classifier_filename)\nPredictMD.parse_functions!(knet_mlp_classifier)\n\nPredictMD.predict_proba(logistic_classifier,smoted_training_features_df,)\nPredictMD.predict_proba(random_forest_classifier,smoted_training_features_df,)\nPredictMD.predict_proba(c_svc_svm_classifier,smoted_training_features_df,)\nPredictMD.predict_proba(nu_svc_svm_classifier,smoted_training_features_df,)\nPredictMD.predict_proba(knet_mlp_classifier,smoted_training_features_df,)\n\nPredictMD.predict_proba(logistic_classifier,testing_features_df,)\nPredictMD.predict_proba(random_forest_classifier,testing_features_df,)\nPredictMD.predict_proba(c_svc_svm_classifier,testing_features_df,)\nPredictMD.predict_proba(nu_svc_svm_classifier,testing_features_df,)\nPredictMD.predict_proba(knet_mlp_classifier,testing_features_df,)\n\nPredictMD.predict(logistic_classifier,smoted_training_features_df,)\nPredictMD.predict(random_forest_classifier,smoted_training_features_df,)\nPredictMD.predict(c_svc_svm_classifier,smoted_training_features_df,)\nPredictMD.predict(nu_svc_svm_classifier,smoted_training_features_df,)\nPredictMD.predict(knet_mlp_classifier,smoted_training_features_df,)\n\nPredictMD.predict(logistic_classifier,testing_features_df,)\nPredictMD.predict(random_forest_classifier,testing_features_df,)\nPredictMD.predict(c_svc_svm_classifier,testing_features_df,)\nPredictMD.predict(nu_svc_svm_classifier,testing_features_df,)\nPredictMD.predict(knet_mlp_classifier,testing_features_df,)\n\n\n\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/logistic_classifier.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/random_forest_classifier.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/c_svc_svm_classifier.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/nu_svc_svm_classifier.jld2\n\nINFO: INFO Attempting to load model...\nINFO: INFO Loaded model from file \n/tmp/breast_cancer_biopsy_example/knet_mlp_classifier.jld2\n\nWARNING: Method definition knetmlp_predict(Any, AbstractArray{T, N} where N where T) in module PredictMD at none:6 overwritten at none:6.\nWARNING: Method definition #knetmlp_predict(Array{Any, 1}, typeof(PredictMD.knetmlp_predict), Any, AbstractArray{T, N} where N where T) in module PredictMD overwritten.\nWARNING: Method definition knetmlp_loss(Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD at none:9 overwritten at none:9.\nWARNING: Method definition #knetmlp_loss(Array{Any, 1}, typeof(PredictMD.knetmlp_loss), Function, Any, AbstractArray{T, N} where N where T, AbstractArray{T, N} where N where T) in module PredictMD overwritten.\n171\u00d71 DataFrames.DataFrame\n\u2502 Row \u2502 Class     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 malignant \u2502\n\u2502 2   \u2502 benign    \u2502\n\u2502 3   \u2502 benign    \u2502\n\u2502 4   \u2502 malignant \u2502\n\u2502 5   \u2502 benign    \u2502\n\u2502 6   \u2502 benign    \u2502\n\u2502 7   \u2502 benign    \u2502\n\u2502 8   \u2502 benign    \u2502\n\u22ee\n\u2502 163 \u2502 benign    \u2502\n\u2502 164 \u2502 benign    \u2502\n\u2502 165 \u2502 benign    \u2502\n\u2502 166 \u2502 malignant \u2502\n\u2502 167 \u2502 benign    \u2502\n\u2502 168 \u2502 malignant \u2502\n\u2502 169 \u2502 benign    \u2502\n\u2502 170 \u2502 benign    \u2502\n\u2502 171 \u2502 benign    \u2502\n\n\n\n\nThis page was generated using \nLiterate.jl\n.", 
            "title": "9. Directly access model output"
        }, 
        {
            "location": "/library/internals/", 
            "text": "Documentation of internals\n\n\n\n\nDocumentation of internals\n\n\nModules\n\n\nConstants\n\n\nTypes\n\n\nFunctions\n\n\nMacros\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nModules\n\n\n#\n\n\nPredictMD\n \n \nModule\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.GPU\n \n \nModule\n.\n\n\nsource\n\n\n\n\nConstants\n\n\n#\n\n\nPredictMD.Fittable\n \n \nConstant\n.\n\n\nFittable\n\n\n\n\nsource\n\n\n#\n\n\nPredictMD.VERSION\n \n \nConstant\n.\n\n\nVERSION\n\n\n\n\nsource\n\n\n\n\nTypes\n\n\n#\n\n\nPredictMD.AbstractEstimator\n \n \nType\n.\n\n\nAbstractEstimator\n\n\n\n\nsource\n\n\n#\n\n\nPredictMD.AbstractFeatureContrasts\n \n \nType\n.\n\n\nAbstractFeatureContrasts\n\n\n\n\nsource\n\n\n#\n\n\nPredictMD.AbstractPipeline\n \n \nType\n.\n\n\nAbstractPipeline\n\n\n\n\nsource\n\n\n#\n\n\nPredictMD.AbstractTransformer\n \n \nType\n.\n\n\nAbstractTransformer\n\n\n\n\nsource\n\n\n#\n\n\nPredictMD.DataFrameFeatureContrasts\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.DataFrameFeatureContrasts\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.DecisionTreeModel\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.GLMModel\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.ImmutableFeatureArrayTransposerTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.ImmutablePackageMultiLabelPredictionTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.ImmutablePackageSingleLabelPredictProbaTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.ImmutablePackageSingleLabelPredictionTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.KnetModel\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.LIBSVMModel\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.MutableDataFrame2ClassificationKnetTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.MutableDataFrame2DecisionTreeTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.MutableDataFrame2RegressionKnetTransformer\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.SimplePipeline\n \n \nType\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.SimplePipeline\n \n \nMethod\n.\n\n\nsource\n\n\n\n\nFunctions\n\n\n#\n\n\nPredictMD.DataFrame2LIBSVMTransformer\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._getlabelint2stringmap\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._getlabelstring2intmap\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabelbinaryclassdataframelogisticclassifier_GLM\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabelbinaryclassdataframeprobitclassifier_GLM\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabelbinaryclassificationmetrics\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabelbinaryclassificationmetrics_tunableparam\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabeldataframeknetregression_Knet\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabeldataframelinearregression_GLM\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabeldataframerandomforestregression_DecisionTree\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabeldataframesvmregression_LIBSVM\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabelmulticlassdataframeknetclassifier_Knet\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabelmulticlassdataframerandomforestclassifier_DecisionTree\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabelmulticlassdataframesvmclassifier_LIBSVM\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD._singlelabelregressionmetrics\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.accuracy\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.auprc\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.aurocc\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.averageprecisionscore\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.avg_precision\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.binary_brier_score\n \n \nMethod\n.\n\n\nbinary_brier_score(ytrue, yscore)\n\n\n\n\nComputes the binary formulation of the Brier score, defined as:\n\n\n\n\n\n\\frac{1}{N}\\sum\\limits _{t=1}^{N}(f_t-o_t)^2 \\,\\!\n\n\n\n\n\nLower values are better. Best value is 0.\n\n\nsource\n\n\n#\n\n\nPredictMD.calculate_smote_pct_under\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.cohen_kappa\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.cohen_kappa\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.cohen_kappa\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.compute_contingency_table\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.compute_contingency_table\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.delete_nothings!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.f1score\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.false_negative_rate\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.false_positive_rate\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fbetascore\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fit!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fix_array_type\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fix_dict_type\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.fix_vector_type\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.generate_feature_contrasts\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.generate_formula\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.generate_formula\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.generate_formula\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.generate_formula\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.generate_interaction_terms\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_binary_thresholds\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_history\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.get_underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.getallrocnums\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.is_deploy_docs\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.is_make_docs\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.is_nothing\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.is_runtests\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.is_square\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.is_travis_ci\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.load_model\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.mean_square_error\n \n \nMethod\n.\n\n\nmean_square_error(ytrue, ypred)\n\n\n\n\nsource\n\n\n#\n\n\nPredictMD.multilabelprobabilitiestopredictions\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.negative_predictive_value\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.open_browser_window\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.open_plot\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.open_plot\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.open_plots_during_tests\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.ordinary_least_squares_regression\n \n \nMethod\n.\n\n\nordinary_least_squares_regression(x, y; intercept = true)\n\n\n\n\nFind the best fit line to the set of 2-dimensional points (x, y) using the ordinary least squares method.\n\n\nIf intercept is true (default), fit a line of the form y = a + b*x (where a and b are real numbers) and return the tuple (a, b)\n\n\nIf intercept is false, fit a line of the form y = b*x (where b is a real number) and return the tuple (0, b)\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.parse_functions!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plot_probability_calibration_curve\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plot_probability_calibration_curve\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotlearningcurves\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotlearningcurves\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotlearningcurves\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotprcurves\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotprcurves\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotroccurves\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotroccurves\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotsinglelabelbinaryclassifierhistogram\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.plotsinglelabelregressiontrueversuspredicted\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.positive_predictive_value\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.prcurve\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.prcurve\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.precision\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predict_proba\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.predictionsassoctodataframe\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.probability_calibration_metrics\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.probability_calibration_metrics\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.probability_calibration_scores_and_fractions\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.probability_calibration_scores_and_fractions\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.r2_score\n \n \nMethod\n.\n\n\nr2_score(ytrue, ypred)\n\n\n\n\nComputes coefficient of determination. Higher values are better. Best value is 1.\n\n\nsource\n\n\n#\n\n\nPredictMD.recall\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.risk_score_cutoff_values\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.risk_score_cutoff_values\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.roccurve\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.roccurve\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.root_mean_square_error\n \n \nMethod\n.\n\n\nroot_mean_square_error(ytrue, ypred)\n\n\n\n\nsource\n\n\n#\n\n\nPredictMD.save_model\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.save_plot\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.save_plot_pdf\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.save_plot_svg\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.save_plot_tex\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.save_plot_tikz\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.sensitivity\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.set_feature_contrasts!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.shuffle_rows!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.shuffle_rows!\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.simple_moving_average\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelbinaryclassdataframelogisticclassifier\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelbinaryclassdataframeprobitclassifier\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelbinaryclassificationmetrics\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelbinaryclassificationmetrics\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelbinaryyscore\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelbinaryytrue\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabeldataframeknetregression\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabeldataframelinearregression\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabeldataframerandomforestregression\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabeldataframesvmregression\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelmulticlassdataframeknetclassifier\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelmulticlassdataframerandomforestclassifier\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelmulticlassdataframesvmclassifier\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelprobabilitiestopredictions\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelregressionmetrics\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelregressionmetrics\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelregressionypred\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.singlelabelregressionytrue\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.smote\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.smote\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.specificity\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.split_data\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.split_data\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nFunction\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.transform\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.trapz\n \n \nMethod\n.\n\n\ntrapz(x, y)\n\n\n\n\nCompute the area under the curve of 2-dimensional points (x, y) using the trapezoidal method.\n\n\nsource\n\n\n#\n\n\nPredictMD.true_negative_rate\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.true_positive_rate\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.underlying\n \n \nMethod\n.\n\n\nsource\n\n\n#\n\n\nPredictMD.GPU.has_cudnn\n \n \nMethod\n.\n\n\nsource\n\n\n\n\nMacros\n\n\n\n\nIndex\n\n\n\n\nPredictMD\n\n\nPredictMD.GPU\n\n\nPredictMD.Fittable\n\n\nPredictMD.VERSION\n\n\nPredictMD.AbstractEstimator\n\n\nPredictMD.AbstractFeatureContrasts\n\n\nPredictMD.AbstractPipeline\n\n\nPredictMD.AbstractTransformer\n\n\nPredictMD.DataFrameFeatureContrasts\n\n\nPredictMD.DataFrameFeatureContrasts\n\n\nPredictMD.DecisionTreeModel\n\n\nPredictMD.GLMModel\n\n\nPredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer\n\n\nPredictMD.ImmutableFeatureArrayTransposerTransformer\n\n\nPredictMD.ImmutablePackageMultiLabelPredictionTransformer\n\n\nPredictMD.ImmutablePackageSingleLabelPredictProbaTransformer\n\n\nPredictMD.ImmutablePackageSingleLabelPredictionTransformer\n\n\nPredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer\n\n\nPredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer\n\n\nPredictMD.KnetModel\n\n\nPredictMD.LIBSVMModel\n\n\nPredictMD.MutableDataFrame2ClassificationKnetTransformer\n\n\nPredictMD.MutableDataFrame2DecisionTreeTransformer\n\n\nPredictMD.MutableDataFrame2RegressionKnetTransformer\n\n\nPredictMD.SimplePipeline\n\n\nPredictMD.SimplePipeline\n\n\nPredictMD.DataFrame2LIBSVMTransformer\n\n\nPredictMD.GPU.has_cudnn\n\n\nPredictMD._getlabelint2stringmap\n\n\nPredictMD._getlabelstring2intmap\n\n\nPredictMD._singlelabelbinaryclassdataframelogisticclassifier_GLM\n\n\nPredictMD._singlelabelbinaryclassdataframeprobitclassifier_GLM\n\n\nPredictMD._singlelabelbinaryclassificationmetrics\n\n\nPredictMD._singlelabelbinaryclassificationmetrics_tunableparam\n\n\nPredictMD._singlelabeldataframeknetregression_Knet\n\n\nPredictMD._singlelabeldataframelinearregression_GLM\n\n\nPredictMD._singlelabeldataframerandomforestregression_DecisionTree\n\n\nPredictMD._singlelabeldataframesvmregression_LIBSVM\n\n\nPredictMD._singlelabelmulticlassdataframeknetclassifier_Knet\n\n\nPredictMD._singlelabelmulticlassdataframerandomforestclassifier_DecisionTree\n\n\nPredictMD._singlelabelmulticlassdataframesvmclassifier_LIBSVM\n\n\nPredictMD._singlelabelregressionmetrics\n\n\nPredictMD.accuracy\n\n\nPredictMD.auprc\n\n\nPredictMD.aurocc\n\n\nPredictMD.averageprecisionscore\n\n\nPredictMD.avg_precision\n\n\nPredictMD.binary_brier_score\n\n\nPredictMD.calculate_smote_pct_under\n\n\nPredictMD.cohen_kappa\n\n\nPredictMD.cohen_kappa\n\n\nPredictMD.cohen_kappa\n\n\nPredictMD.compute_contingency_table\n\n\nPredictMD.compute_contingency_table\n\n\nPredictMD.delete_nothings!\n\n\nPredictMD.f1score\n\n\nPredictMD.false_negative_rate\n\n\nPredictMD.false_positive_rate\n\n\nPredictMD.fbetascore\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fit!\n\n\nPredictMD.fix_array_type\n\n\nPredictMD.fix_dict_type\n\n\nPredictMD.fix_vector_type\n\n\nPredictMD.generate_feature_contrasts\n\n\nPredictMD.generate_formula\n\n\nPredictMD.generate_formula\n\n\nPredictMD.generate_formula\n\n\nPredictMD.generate_formula\n\n\nPredictMD.generate_interaction_terms\n\n\nPredictMD.get_binary_thresholds\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_history\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.get_underlying\n\n\nPredictMD.getallrocnums\n\n\nPredictMD.is_deploy_docs\n\n\nPredictMD.is_make_docs\n\n\nPredictMD.is_nothing\n\n\nPredictMD.is_runtests\n\n\nPredictMD.is_square\n\n\nPredictMD.is_travis_ci\n\n\nPredictMD.load_model\n\n\nPredictMD.mean_square_error\n\n\nPredictMD.multilabelprobabilitiestopredictions\n\n\nPredictMD.negative_predictive_value\n\n\nPredictMD.open_browser_window\n\n\nPredictMD.open_plot\n\n\nPredictMD.open_plot\n\n\nPredictMD.open_plots_during_tests\n\n\nPredictMD.ordinary_least_squares_regression\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.parse_functions!\n\n\nPredictMD.plot_probability_calibration_curve\n\n\nPredictMD.plot_probability_calibration_curve\n\n\nPredictMD.plotlearningcurves\n\n\nPredictMD.plotlearningcurves\n\n\nPredictMD.plotlearningcurves\n\n\nPredictMD.plotprcurves\n\n\nPredictMD.plotprcurves\n\n\nPredictMD.plotroccurves\n\n\nPredictMD.plotroccurves\n\n\nPredictMD.plotsinglelabelbinaryclassifierhistogram\n\n\nPredictMD.plotsinglelabelregressiontrueversuspredicted\n\n\nPredictMD.positive_predictive_value\n\n\nPredictMD.prcurve\n\n\nPredictMD.prcurve\n\n\nPredictMD.precision\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predict_proba\n\n\nPredictMD.predictionsassoctodataframe\n\n\nPredictMD.probability_calibration_metrics\n\n\nPredictMD.probability_calibration_metrics\n\n\nPredictMD.probability_calibration_scores_and_fractions\n\n\nPredictMD.probability_calibration_scores_and_fractions\n\n\nPredictMD.r2_score\n\n\nPredictMD.recall\n\n\nPredictMD.risk_score_cutoff_values\n\n\nPredictMD.risk_score_cutoff_values\n\n\nPredictMD.roccurve\n\n\nPredictMD.roccurve\n\n\nPredictMD.root_mean_square_error\n\n\nPredictMD.save_model\n\n\nPredictMD.save_plot\n\n\nPredictMD.save_plot_pdf\n\n\nPredictMD.save_plot_svg\n\n\nPredictMD.save_plot_tex\n\n\nPredictMD.save_plot_tikz\n\n\nPredictMD.sensitivity\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.set_feature_contrasts!\n\n\nPredictMD.shuffle_rows!\n\n\nPredictMD.shuffle_rows!\n\n\nPredictMD.simple_moving_average\n\n\nPredictMD.singlelabelbinaryclassdataframelogisticclassifier\n\n\nPredictMD.singlelabelbinaryclassdataframeprobitclassifier\n\n\nPredictMD.singlelabelbinaryclassificationmetrics\n\n\nPredictMD.singlelabelbinaryclassificationmetrics\n\n\nPredictMD.singlelabelbinaryyscore\n\n\nPredictMD.singlelabelbinaryytrue\n\n\nPredictMD.singlelabeldataframeknetregression\n\n\nPredictMD.singlelabeldataframelinearregression\n\n\nPredictMD.singlelabeldataframerandomforestregression\n\n\nPredictMD.singlelabeldataframesvmregression\n\n\nPredictMD.singlelabelmulticlassdataframeknetclassifier\n\n\nPredictMD.singlelabelmulticlassdataframerandomforestclassifier\n\n\nPredictMD.singlelabelmulticlassdataframesvmclassifier\n\n\nPredictMD.singlelabelprobabilitiestopredictions\n\n\nPredictMD.singlelabelregressionmetrics\n\n\nPredictMD.singlelabelregressionmetrics\n\n\nPredictMD.singlelabelregressionypred\n\n\nPredictMD.singlelabelregressionytrue\n\n\nPredictMD.smote\n\n\nPredictMD.smote\n\n\nPredictMD.specificity\n\n\nPredictMD.split_data\n\n\nPredictMD.split_data\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.transform\n\n\nPredictMD.trapz\n\n\nPredictMD.true_negative_rate\n\n\nPredictMD.true_positive_rate\n\n\nPredictMD.underlying", 
            "title": "Internals"
        }, 
        {
            "location": "/library/internals/#documentation-of-internals", 
            "text": "Documentation of internals  Modules  Constants  Types  Functions  Macros  Index", 
            "title": "Documentation of internals"
        }, 
        {
            "location": "/library/internals/#modules", 
            "text": "#  PredictMD     Module .  source  #  PredictMD.GPU     Module .  source", 
            "title": "Modules"
        }, 
        {
            "location": "/library/internals/#constants", 
            "text": "#  PredictMD.Fittable     Constant .  Fittable  source  #  PredictMD.VERSION     Constant .  VERSION  source", 
            "title": "Constants"
        }, 
        {
            "location": "/library/internals/#types", 
            "text": "#  PredictMD.AbstractEstimator     Type .  AbstractEstimator  source  #  PredictMD.AbstractFeatureContrasts     Type .  AbstractFeatureContrasts  source  #  PredictMD.AbstractPipeline     Type .  AbstractPipeline  source  #  PredictMD.AbstractTransformer     Type .  AbstractTransformer  source  #  PredictMD.DataFrameFeatureContrasts     Type .  source  #  PredictMD.DataFrameFeatureContrasts     Method .  source  #  PredictMD.DecisionTreeModel     Type .  source  #  PredictMD.GLMModel     Type .  source  #  PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer     Type .  source  #  PredictMD.ImmutableFeatureArrayTransposerTransformer     Type .  source  #  PredictMD.ImmutablePackageMultiLabelPredictionTransformer     Type .  source  #  PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer     Type .  source  #  PredictMD.ImmutablePackageSingleLabelPredictionTransformer     Type .  source  #  PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer     Type .  source  #  PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer     Type .  source  #  PredictMD.KnetModel     Type .  source  #  PredictMD.LIBSVMModel     Type .  source  #  PredictMD.MutableDataFrame2ClassificationKnetTransformer     Type .  source  #  PredictMD.MutableDataFrame2DecisionTreeTransformer     Type .  source  #  PredictMD.MutableDataFrame2RegressionKnetTransformer     Type .  source  #  PredictMD.SimplePipeline     Type .  source  #  PredictMD.SimplePipeline     Method .  source", 
            "title": "Types"
        }, 
        {
            "location": "/library/internals/#functions", 
            "text": "#  PredictMD.DataFrame2LIBSVMTransformer     Method .  source  #  PredictMD._getlabelint2stringmap     Method .  source  #  PredictMD._getlabelstring2intmap     Method .  source  #  PredictMD._singlelabelbinaryclassdataframelogisticclassifier_GLM     Method .  source  #  PredictMD._singlelabelbinaryclassdataframeprobitclassifier_GLM     Method .  source  #  PredictMD._singlelabelbinaryclassificationmetrics     Method .  source  #  PredictMD._singlelabelbinaryclassificationmetrics_tunableparam     Method .  source  #  PredictMD._singlelabeldataframeknetregression_Knet     Method .  source  #  PredictMD._singlelabeldataframelinearregression_GLM     Method .  source  #  PredictMD._singlelabeldataframerandomforestregression_DecisionTree     Method .  source  #  PredictMD._singlelabeldataframesvmregression_LIBSVM     Method .  source  #  PredictMD._singlelabelmulticlassdataframeknetclassifier_Knet     Method .  source  #  PredictMD._singlelabelmulticlassdataframerandomforestclassifier_DecisionTree     Method .  source  #  PredictMD._singlelabelmulticlassdataframesvmclassifier_LIBSVM     Method .  source  #  PredictMD._singlelabelregressionmetrics     Method .  source  #  PredictMD.accuracy     Method .  source  #  PredictMD.auprc     Method .  source  #  PredictMD.aurocc     Method .  source  #  PredictMD.averageprecisionscore     Method .  source  #  PredictMD.avg_precision     Method .  source  #  PredictMD.binary_brier_score     Method .  binary_brier_score(ytrue, yscore)  Computes the binary formulation of the Brier score, defined as:   \n\\frac{1}{N}\\sum\\limits _{t=1}^{N}(f_t-o_t)^2 \\,\\!   Lower values are better. Best value is 0.  source  #  PredictMD.calculate_smote_pct_under     Method .  source  #  PredictMD.cohen_kappa     Method .  source  #  PredictMD.cohen_kappa     Method .  source  #  PredictMD.cohen_kappa     Method .  source  #  PredictMD.compute_contingency_table     Method .  source  #  PredictMD.compute_contingency_table     Method .  source  #  PredictMD.delete_nothings!     Method .  source  #  PredictMD.f1score     Method .  source  #  PredictMD.false_negative_rate     Method .  source  #  PredictMD.false_positive_rate     Method .  source  #  PredictMD.fbetascore     Method .  source  #  PredictMD.fit!     Function .  source  #  PredictMD.fit!     Function .  source  #  PredictMD.fit!     Function .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fit!     Method .  source  #  PredictMD.fix_array_type     Method .  source  #  PredictMD.fix_dict_type     Method .  source  #  PredictMD.fix_vector_type     Method .  source  #  PredictMD.generate_feature_contrasts     Method .  source  #  PredictMD.generate_formula     Method .  source  #  PredictMD.generate_formula     Method .  source  #  PredictMD.generate_formula     Method .  source  #  PredictMD.generate_formula     Method .  source  #  PredictMD.generate_interaction_terms     Method .  source  #  PredictMD.get_binary_thresholds     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_history     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.get_underlying     Method .  source  #  PredictMD.getallrocnums     Method .  source  #  PredictMD.is_deploy_docs     Method .  source  #  PredictMD.is_make_docs     Method .  source  #  PredictMD.is_nothing     Function .  source  #  PredictMD.is_runtests     Method .  source  #  PredictMD.is_square     Method .  source  #  PredictMD.is_travis_ci     Method .  source  #  PredictMD.load_model     Method .  source  #  PredictMD.mean_square_error     Method .  mean_square_error(ytrue, ypred)  source  #  PredictMD.multilabelprobabilitiestopredictions     Method .  source  #  PredictMD.negative_predictive_value     Method .  source  #  PredictMD.open_browser_window     Function .  source  #  PredictMD.open_plot     Method .  source  #  PredictMD.open_plot     Method .  source  #  PredictMD.open_plots_during_tests     Method .  source  #  PredictMD.ordinary_least_squares_regression     Method .  ordinary_least_squares_regression(x, y; intercept = true)  Find the best fit line to the set of 2-dimensional points (x, y) using the ordinary least squares method.  If intercept is true (default), fit a line of the form y = a + b*x (where a and b are real numbers) and return the tuple (a, b)  If intercept is false, fit a line of the form y = b*x (where b is a real number) and return the tuple (0, b)  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.parse_functions!     Method .  source  #  PredictMD.plot_probability_calibration_curve     Function .  source  #  PredictMD.plot_probability_calibration_curve     Method .  source  #  PredictMD.plotlearningcurves     Function .  source  #  PredictMD.plotlearningcurves     Function .  source  #  PredictMD.plotlearningcurves     Method .  source  #  PredictMD.plotprcurves     Method .  source  #  PredictMD.plotprcurves     Method .  source  #  PredictMD.plotroccurves     Method .  source  #  PredictMD.plotroccurves     Method .  source  #  PredictMD.plotsinglelabelbinaryclassifierhistogram     Method .  source  #  PredictMD.plotsinglelabelregressiontrueversuspredicted     Method .  source  #  PredictMD.positive_predictive_value     Method .  source  #  PredictMD.prcurve     Method .  source  #  PredictMD.prcurve     Method .  source  #  PredictMD.precision     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predict_proba     Method .  source  #  PredictMD.predictionsassoctodataframe     Function .  source  #  PredictMD.probability_calibration_metrics     Function .  source  #  PredictMD.probability_calibration_metrics     Method .  source  #  PredictMD.probability_calibration_scores_and_fractions     Method .  source  #  PredictMD.probability_calibration_scores_and_fractions     Method .  source  #  PredictMD.r2_score     Method .  r2_score(ytrue, ypred)  Computes coefficient of determination. Higher values are better. Best value is 1.  source  #  PredictMD.recall     Method .  source  #  PredictMD.risk_score_cutoff_values     Method .  source  #  PredictMD.risk_score_cutoff_values     Method .  source  #  PredictMD.roccurve     Method .  source  #  PredictMD.roccurve     Method .  source  #  PredictMD.root_mean_square_error     Method .  root_mean_square_error(ytrue, ypred)  source  #  PredictMD.save_model     Method .  source  #  PredictMD.save_plot     Method .  source  #  PredictMD.save_plot_pdf     Method .  source  #  PredictMD.save_plot_svg     Method .  source  #  PredictMD.save_plot_tex     Method .  source  #  PredictMD.save_plot_tikz     Method .  source  #  PredictMD.sensitivity     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.set_feature_contrasts!     Method .  source  #  PredictMD.shuffle_rows!     Method .  source  #  PredictMD.shuffle_rows!     Method .  source  #  PredictMD.simple_moving_average     Method .  source  #  PredictMD.singlelabelbinaryclassdataframelogisticclassifier     Method .  source  #  PredictMD.singlelabelbinaryclassdataframeprobitclassifier     Method .  source  #  PredictMD.singlelabelbinaryclassificationmetrics     Method .  source  #  PredictMD.singlelabelbinaryclassificationmetrics     Method .  source  #  PredictMD.singlelabelbinaryyscore     Method .  source  #  PredictMD.singlelabelbinaryytrue     Method .  source  #  PredictMD.singlelabeldataframeknetregression     Method .  source  #  PredictMD.singlelabeldataframelinearregression     Method .  source  #  PredictMD.singlelabeldataframerandomforestregression     Method .  source  #  PredictMD.singlelabeldataframesvmregression     Method .  source  #  PredictMD.singlelabelmulticlassdataframeknetclassifier     Method .  source  #  PredictMD.singlelabelmulticlassdataframerandomforestclassifier     Method .  source  #  PredictMD.singlelabelmulticlassdataframesvmclassifier     Method .  source  #  PredictMD.singlelabelprobabilitiestopredictions     Method .  source  #  PredictMD.singlelabelregressionmetrics     Method .  source  #  PredictMD.singlelabelregressionmetrics     Method .  source  #  PredictMD.singlelabelregressionypred     Method .  source  #  PredictMD.singlelabelregressionytrue     Method .  source  #  PredictMD.smote     Method .  source  #  PredictMD.smote     Method .  source  #  PredictMD.specificity     Method .  source  #  PredictMD.split_data     Method .  source  #  PredictMD.split_data     Method .  source  #  PredictMD.transform     Function .  source  #  PredictMD.transform     Function .  source  #  PredictMD.transform     Method .  source  #  PredictMD.transform     Method .  source  #  PredictMD.transform     Method .  source  #  PredictMD.transform     Method .  source  #  PredictMD.transform     Method .  source  #  PredictMD.transform     Method .  source  #  PredictMD.transform     Method .  source  #  PredictMD.transform     Method .  source  #  PredictMD.trapz     Method .  trapz(x, y)  Compute the area under the curve of 2-dimensional points (x, y) using the trapezoidal method.  source  #  PredictMD.true_negative_rate     Method .  source  #  PredictMD.true_positive_rate     Method .  source  #  PredictMD.underlying     Method .  source  #  PredictMD.GPU.has_cudnn     Method .  source", 
            "title": "Functions"
        }, 
        {
            "location": "/library/internals/#macros", 
            "text": "", 
            "title": "Macros"
        }, 
        {
            "location": "/library/internals/#index", 
            "text": "PredictMD  PredictMD.GPU  PredictMD.Fittable  PredictMD.VERSION  PredictMD.AbstractEstimator  PredictMD.AbstractFeatureContrasts  PredictMD.AbstractPipeline  PredictMD.AbstractTransformer  PredictMD.DataFrameFeatureContrasts  PredictMD.DataFrameFeatureContrasts  PredictMD.DecisionTreeModel  PredictMD.GLMModel  PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer  PredictMD.ImmutableFeatureArrayTransposerTransformer  PredictMD.ImmutablePackageMultiLabelPredictionTransformer  PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer  PredictMD.ImmutablePackageSingleLabelPredictionTransformer  PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer  PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer  PredictMD.KnetModel  PredictMD.LIBSVMModel  PredictMD.MutableDataFrame2ClassificationKnetTransformer  PredictMD.MutableDataFrame2DecisionTreeTransformer  PredictMD.MutableDataFrame2RegressionKnetTransformer  PredictMD.SimplePipeline  PredictMD.SimplePipeline  PredictMD.DataFrame2LIBSVMTransformer  PredictMD.GPU.has_cudnn  PredictMD._getlabelint2stringmap  PredictMD._getlabelstring2intmap  PredictMD._singlelabelbinaryclassdataframelogisticclassifier_GLM  PredictMD._singlelabelbinaryclassdataframeprobitclassifier_GLM  PredictMD._singlelabelbinaryclassificationmetrics  PredictMD._singlelabelbinaryclassificationmetrics_tunableparam  PredictMD._singlelabeldataframeknetregression_Knet  PredictMD._singlelabeldataframelinearregression_GLM  PredictMD._singlelabeldataframerandomforestregression_DecisionTree  PredictMD._singlelabeldataframesvmregression_LIBSVM  PredictMD._singlelabelmulticlassdataframeknetclassifier_Knet  PredictMD._singlelabelmulticlassdataframerandomforestclassifier_DecisionTree  PredictMD._singlelabelmulticlassdataframesvmclassifier_LIBSVM  PredictMD._singlelabelregressionmetrics  PredictMD.accuracy  PredictMD.auprc  PredictMD.aurocc  PredictMD.averageprecisionscore  PredictMD.avg_precision  PredictMD.binary_brier_score  PredictMD.calculate_smote_pct_under  PredictMD.cohen_kappa  PredictMD.cohen_kappa  PredictMD.cohen_kappa  PredictMD.compute_contingency_table  PredictMD.compute_contingency_table  PredictMD.delete_nothings!  PredictMD.f1score  PredictMD.false_negative_rate  PredictMD.false_positive_rate  PredictMD.fbetascore  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fit!  PredictMD.fix_array_type  PredictMD.fix_dict_type  PredictMD.fix_vector_type  PredictMD.generate_feature_contrasts  PredictMD.generate_formula  PredictMD.generate_formula  PredictMD.generate_formula  PredictMD.generate_formula  PredictMD.generate_interaction_terms  PredictMD.get_binary_thresholds  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_history  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.get_underlying  PredictMD.getallrocnums  PredictMD.is_deploy_docs  PredictMD.is_make_docs  PredictMD.is_nothing  PredictMD.is_runtests  PredictMD.is_square  PredictMD.is_travis_ci  PredictMD.load_model  PredictMD.mean_square_error  PredictMD.multilabelprobabilitiestopredictions  PredictMD.negative_predictive_value  PredictMD.open_browser_window  PredictMD.open_plot  PredictMD.open_plot  PredictMD.open_plots_during_tests  PredictMD.ordinary_least_squares_regression  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.parse_functions!  PredictMD.plot_probability_calibration_curve  PredictMD.plot_probability_calibration_curve  PredictMD.plotlearningcurves  PredictMD.plotlearningcurves  PredictMD.plotlearningcurves  PredictMD.plotprcurves  PredictMD.plotprcurves  PredictMD.plotroccurves  PredictMD.plotroccurves  PredictMD.plotsinglelabelbinaryclassifierhistogram  PredictMD.plotsinglelabelregressiontrueversuspredicted  PredictMD.positive_predictive_value  PredictMD.prcurve  PredictMD.prcurve  PredictMD.precision  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predict_proba  PredictMD.predictionsassoctodataframe  PredictMD.probability_calibration_metrics  PredictMD.probability_calibration_metrics  PredictMD.probability_calibration_scores_and_fractions  PredictMD.probability_calibration_scores_and_fractions  PredictMD.r2_score  PredictMD.recall  PredictMD.risk_score_cutoff_values  PredictMD.risk_score_cutoff_values  PredictMD.roccurve  PredictMD.roccurve  PredictMD.root_mean_square_error  PredictMD.save_model  PredictMD.save_plot  PredictMD.save_plot_pdf  PredictMD.save_plot_svg  PredictMD.save_plot_tex  PredictMD.save_plot_tikz  PredictMD.sensitivity  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.set_feature_contrasts!  PredictMD.shuffle_rows!  PredictMD.shuffle_rows!  PredictMD.simple_moving_average  PredictMD.singlelabelbinaryclassdataframelogisticclassifier  PredictMD.singlelabelbinaryclassdataframeprobitclassifier  PredictMD.singlelabelbinaryclassificationmetrics  PredictMD.singlelabelbinaryclassificationmetrics  PredictMD.singlelabelbinaryyscore  PredictMD.singlelabelbinaryytrue  PredictMD.singlelabeldataframeknetregression  PredictMD.singlelabeldataframelinearregression  PredictMD.singlelabeldataframerandomforestregression  PredictMD.singlelabeldataframesvmregression  PredictMD.singlelabelmulticlassdataframeknetclassifier  PredictMD.singlelabelmulticlassdataframerandomforestclassifier  PredictMD.singlelabelmulticlassdataframesvmclassifier  PredictMD.singlelabelprobabilitiestopredictions  PredictMD.singlelabelregressionmetrics  PredictMD.singlelabelregressionmetrics  PredictMD.singlelabelregressionypred  PredictMD.singlelabelregressionytrue  PredictMD.smote  PredictMD.smote  PredictMD.specificity  PredictMD.split_data  PredictMD.split_data  PredictMD.transform  PredictMD.transform  PredictMD.transform  PredictMD.transform  PredictMD.transform  PredictMD.transform  PredictMD.transform  PredictMD.transform  PredictMD.transform  PredictMD.transform  PredictMD.trapz  PredictMD.true_negative_rate  PredictMD.true_positive_rate  PredictMD.underlying", 
            "title": "Index"
        }
    ]
}